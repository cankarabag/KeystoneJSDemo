'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TAB_KEY_CODE = 9;
var ENTER_KEY_CODE = 13;
var SPACE_KEY_CODE = 32;

var not = function not(fn) {
  return function () {
    return !fn.apply(undefined, arguments);
  };
};
var validKey = function validKey(event, support) {
  if (support === 'auto') {
    if (event.target && event.target.nodeName && event.target.nodeName === 'A') {
      support = 'enter';
    } else {
      support = 'both';
    }
  }

  var keys = [];
  if (support === 'space' || support === 'both') keys.push(SPACE_KEY_CODE);
  if (support === 'enter' || support === 'both') keys.push(ENTER_KEY_CODE);

  return keys.includes(event.which);
};
var invalidKey = not(validKey);
var isTouchDevice = function isTouchDevice() {
  return Boolean(typeof window !== 'undefined' && 'ontouchstart' in window || typeof navigator !== 'undefined' && navigator.maxTouchPoints);
};

var PseudoState = function (_Component) {
  _inherits(PseudoState, _Component);

  function PseudoState() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PseudoState);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PseudoState.__proto__ || Object.getPrototypeOf(PseudoState)).call.apply(_ref, [this].concat(args))), _this), _this.isTouchDevice = isTouchDevice(), _this.tabIsDown = false, _this.state = {
      focusOrigin: null,
      isActive: false,
      isFocus: false,
      isHover: false
    }, _this.keydown = function (e) {
      if (e.which !== TAB_KEY_CODE) return;
      _this.tabIsDown = true;
    }, _this.keyup = function (e) {
      if (e.which !== TAB_KEY_CODE) return;
      _this.tabIsDown = false;
    }, _this.handleBlur = function () {
      _this.setState({ isFocus: false, focusOrigin: null });
    }, _this.handleFocus = function () {
      var focusOrigin = _this.tabIsDown ? 'keyboard' : 'mouse';
      _this.setState({ isFocus: true, focusOrigin: focusOrigin });
    }, _this.handleMouseLeave = function () {
      _this.setState({ isActive: false, isHover: false });
    }, _this.handleMouseEnter = function () {
      // NOTE: `mouseenter` is called during `touchstart` on some devices. bail
      // early to avoid an invalid state.
      if (_this.isTouchDevice) return;
      _this.setState({ isHover: true });
    }, _this.handleMouseUp = function () {
      // NOTE: touch start/end occur before mouse events. bail early to avoid
      // duplicate state calls on touch devices.
      if (_this.isTouchDevice) return;
      _this.setState({ isActive: false });
    }, _this.handleMouseDown = function () {
      // NOTE: touch start/end occur before mouse events. bail early to avoid
      // duplicate state calls on touch devices.
      if (_this.isTouchDevice) return;
      _this.setState({ isActive: true });
    }, _this.handleKeyDown = function (event) {
      if (invalidKey(event, _this.props.keyboardSupport)) return;
      _this.setState({ isActive: true });
    }, _this.handleKeyUp = function (event) {
      if (invalidKey(event, _this.props.keyboardSupport)) return;
      _this.setState({ isActive: false });
    }, _this.handleTouchStart = function () {
      _this.setState({ isActive: true });
    }, _this.handleTouchEnd = function () {
      _this.setState({ isActive: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PseudoState, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('keydown', this.keydown);
      window.addEventListener('keyup', this.keyup);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.keydown);
      window.removeEventListener('keyup', this.keyup);
    }
  }, {
    key: 'render',
    value: function render() {
      var snapshot = this.state;

      var handlers = {
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyDown: undefined,
        onKeyUp: undefined,
        onMouseDown: this.handleMouseDown,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseUp: this.handleMouseUp,
        onTouchEnd: this.handleTouchEnd,
        onTouchStart: this.handleTouchStart
      };

      // only bind keyboard handlers if applicable
      if (this.props.keyboardSupport !== 'none') {
        handlers.onKeyDown = this.handleKeyDown;
        handlers.onKeyUp = this.handleKeyUp;
      }

      return this.props.children(handlers, snapshot);
    }
  }]);

  return PseudoState;
}(_react.Component);

PseudoState.defaultProps = {
  keyboardSupport: 'auto'
};
exports.default = PseudoState;