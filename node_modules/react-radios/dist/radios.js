'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Radio = exports.RadioGroup = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _unstated = require('unstated');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Container
// ------------------------------

var instanceCounter = 0;
var parse = function parse(v) {
  return isNaN(v) ? v : parseInt(v, 10);
};

var RadioContainer = function (_Container) {
  _inherits(RadioContainer, _Container);

  function RadioContainer(props) {
    _classCallCheck(this, RadioContainer);

    var _this = _possibleConstructorReturn(this, (RadioContainer.__proto__ || Object.getPrototypeOf(RadioContainer)).call(this, props));

    _this.getName = function () {
      return _this.name;
    };

    _this.onChange = function (event) {
      var value = parse(event.target.value);

      _this.setState({ value: value });

      if (_this.consumerOnChange) _this.consumerOnChange(value);
    };

    _this.consumerOnChange = props.onChange;
    _this.name = props.name || 'radio-group-' + instanceCounter++;

    _this.state = { value: props.value };
    return _this;
  }

  return RadioContainer;
}(_unstated.Container);

// Group
// ------------------------------

function isFragment(c) {
  return c.toString() === 'Symbol(react.fragment)';
}

var RadioGroup = exports.RadioGroup = function (_Component) {
  _inherits(RadioGroup, _Component);

  function RadioGroup() {
    var _ref;

    var _temp, _this2, _ret;

    _classCallCheck(this, RadioGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).call.apply(_ref, [this].concat(args))), _this2), _this2.container = new RadioContainer(_this2.props), _temp), _possibleConstructorReturn(_this2, _ret);
  }

  _createClass(RadioGroup, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          Tag = _props.component,
          onChange = _props.onChange,
          value = _props.value,
          props = _objectWithoutProperties(_props, ['children', 'component', 'onChange', 'value']);

      var passProps = isFragment(Tag) ? {} : props;

      return _react2.default.createElement(
        _unstated.Provider,
        { inject: [this.container] },
        _react2.default.createElement(
          Tag,
          passProps,
          children
        )
      );
    }
  }]);

  return RadioGroup;
}(_react.Component);

// Radio
// ------------------------------

RadioGroup.defaultProps = {
  component: _react.Fragment,
  role: 'radiogroup'
};

var Radio = exports.Radio = function (_Component2) {
  _inherits(Radio, _Component2);

  function Radio() {
    _classCallCheck(this, Radio);

    return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));
  }

  _createClass(Radio, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          Tag = _props2.component,
          innerRef = _props2.innerRef,
          props = _objectWithoutProperties(_props2, ['component', 'innerRef']);

      return _react2.default.createElement(
        _unstated.Subscribe,
        { to: [RadioContainer] },
        function (_ref2) {
          var getName = _ref2.getName,
              onChange = _ref2.onChange,
              state = _ref2.state;

          var checked = state.value === props.value;

          return _react2.default.createElement(Tag, _extends({}, props, {
            checked: checked,
            name: getName(),
            onChange: onChange,
            ref: innerRef,
            type: 'radio'
          }));
        }
      );
    }
  }]);

  return Radio;
}(_react.Component);

Radio.defaultProps = {
  component: 'input'
};