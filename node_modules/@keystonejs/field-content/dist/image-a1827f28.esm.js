import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import _extends from '@babel/runtime/helpers/esm/extends';
import { forwardRef, useLayoutEffect, createContext, useContext } from 'react';
import { Popper } from 'react-popper';
import { u as useStateWithEqualityCheck } from './index-d98bbfba.esm.js';
let PopperRender = forwardRef((_ref, ref) => {
  let {
    scheduleUpdate,
    alignment,
    isFocused,
    style,
    onAlignmentChange
  } = _ref;
  useLayoutEffect(scheduleUpdate, [alignment]);
  return jsx("div", {
    ref: ref,
    css: {
      display: isFocused ? 'block' : 'none',
      backgroundColor: 'black',
      padding: 8
    },
    style: style
  }, ['left', 'center', 'right'].map(align => {
    return jsx("button", {
      type: "button",
      key: align,
      onMouseDown: event => {
        // so that the image block doesn't get deselected
        event.preventDefault();
      },
      onClick: () => {
        onAlignmentChange(align);
      }
    }, align);
  }));
});
let popperModifiers = {
  flip: {
    enabled: false
  },
  hide: {
    enabled: false
  },
  preventOverflow: {
    enabled: false
  }
};

let Image = _ref2 => {
  let {
    alignment,
    attributes,
    isFocused,
    src,
    onAlignmentChange
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["alignment", "attributes", "isFocused", "src", "onAlignmentChange"]);

  let [referenceElement, setReferenceElement] = useStateWithEqualityCheck(null);
  return jsx("div", null, jsx("img", _extends({}, props, attributes, {
    src: src,
    ref: setReferenceElement,
    css: {
      width: '100%',
      outline: isFocused ? 'auto' : null
    }
  })), jsx(Popper, {
    modifiers: popperModifiers,
    placement: "top",
    referenceElement: referenceElement
  }, _ref3 => {
    let {
      style,
      ref,
      scheduleUpdate
    } = _ref3;
    return jsx(PopperRender, {
      scheduleUpdate,
      alignment,
      ref,
      isFocused,
      style,
      onAlignmentChange
    });
  }));
};
/** @jsx jsx */


let type = 'image';
let ImageAlignmentContext = createContext({
  aligment: '',

  onAlignmentChange() {}

});

function Node(props) {
  let {
    data
  } = props.node;
  let {
    aligment,
    onAlignmentChange
  } = useContext(ImageAlignmentContext);
  return jsx(Image, {
    alignment: aligment,
    attributes: props.attributes,
    isFocused: props.isFocused,
    src: data.get('src'),
    onAlignmentChange: onAlignmentChange
  });
}

let getSchema = () => ({
  isVoid: true
});

export { ImageAlignmentContext, Node, getSchema, type };
