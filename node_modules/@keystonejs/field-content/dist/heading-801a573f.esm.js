import '@babel/runtime/helpers/esm/objectWithoutProperties';
import '@emotion/core';
import '@babel/runtime/helpers/esm/extends';
import { a as hasBlock } from './utils-6cbc3f1d.esm.js';
import '@arch-ui/theme';
import '@arch-ui/color-utils';
import '@arch-ui/tooltip';
import '@arch-ui/typography';
import { T as ToolbarButton } from './toolbar-components-f779486c.esm.js';
import { createElement } from 'react';
import { type as type$1 } from './paragraph-c0d6d894.esm.js';
let type = 'heading';

function ToolbarElement(_ref) {
  let {
    editor,
    editorState
  } = _ref;
  return createElement(ToolbarButton, {
    icon: createElement("span", {
      "aria-hidden": true
    }, "H"),
    label: "Heading",
    isActive: hasBlock(editorState, type),
    onClick: () => {
      if (hasBlock(editorState, type)) {
        editor.setBlocks({
          type: type$1
        });
      } else {
        editor.setBlocks({
          type: type
        });
      }

      editor.focus();
    }
  });
}

function Node(_ref2) {
  let {
    attributes,
    children
  } = _ref2;
  return createElement("h2", attributes, children);
}

let getPlugins = () => [{
  onKeyDown(event, editor, next) {
    // make it so when you press enter after typing a heading,
    // the block type will change to a paragraph
    if (event.keyCode === 13 && editor.value.blocks.every(block => block.type === type)) {
      editor.splitBlock().setBlocks(type$1);
      return;
    }

    next();
  }

}];

export { Node, ToolbarElement, getPlugins, type };
