import '@babel/runtime/helpers/esm/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { Block } from 'slate';
import { jsx } from '@emotion/core';
import _extends from '@babel/runtime/helpers/esm/extends';
import { g as getSelectionReference } from './utils-6cbc3f1d.esm.js';
import { PlusIcon, CircleSlashIcon } from '@arch-ui/icons';
import { colors, gridSize } from '@arch-ui/theme';
import '@arch-ui/color-utils';
import '@arch-ui/tooltip';
import '@arch-ui/typography';
import { T as ToolbarButton } from './toolbar-components-f779486c.esm.js';
import React__default, { useState, useRef, useCallback, useLayoutEffect, Fragment, forwardRef, useMemo, Component } from 'react';
import { type } from './paragraph-c0d6d894.esm.js';
import { Popper } from 'react-popper';
import { u as useStateWithEqualityCheck } from './index-d98bbfba.esm.js';
import { Editor } from 'slate-react';
import { createPortal } from 'react-dom';
import isHotkey from 'is-hotkey';
import { useMeasure } from '@arch-ui/hooks';
import applyRef from 'apply-ref';
import { FieldContainer, FieldLabel, FieldInput } from '@arch-ui/fields';
import { inputStyles } from '@arch-ui/input';

function markPlugin(type, options) {
  return {
    onKeyDown(event, editor, next) {
      // If it doesn't match our `key`, let other plugins handle it.
      if (!options.test(event)) return next(); // Prevent the default characters from being inserted.

      event.preventDefault(); // Toggle the mark `type`.

      editor.toggleMark(type);
    },

    renderMark: (props, editor, next) => {
      if (props.mark.type === type) {
        return options.render(props);
      }

      return next();
    }
  };
}

let marks = {
  bold: {
    test: isHotkey('mod+b'),
    label: 'Bold',
    icon: props => {
      return React__default.createElement("strong", _extends({}, props, {
        "aria-hidden": true
      }), "B");
    },
    render: props => React__default.createElement("strong", props.attributes, props.children)
  },
  italic: {
    test: isHotkey('mod+i'),
    label: 'Italic',
    icon: props => {
      return React__default.createElement("em", _extends({}, props, {
        "aria-hidden": true
      }), "I");
    },
    render: props => React__default.createElement("em", props.attributes, props.children)
  },
  strikethrough: {
    test: isHotkey('mod+~'),
    label: 'Strikethrough',
    icon: props => {
      return React__default.createElement("s", _extends({}, props, {
        "aria-hidden": true
      }), "S");
    },
    render: props => React__default.createElement("s", props.attributes, props.children)
  },
  underline: {
    test: isHotkey('mod+u'),
    label: 'Underline',
    icon: props => {
      return React__default.createElement("u", _extends({}, props, {
        "aria-hidden": true
      }), "U");
    },
    render: props => React__default.createElement("u", props.attributes, props.children)
  }
};
let markTypes = Object.keys(marks);
let plugins = Object.entries(marks).map(_ref => {
  let [type, options] = _ref;
  return markPlugin(type, options);
});
/** @jsx jsx */

const getSelectedElement = () => {
  if (document.selection) return document.selection.createRange().parentElement();else {
    var selection = window.getSelection();
    if (selection.rangeCount > 0) return selection.getRangeAt(0).startContainer.parentNode;
  }
};

let AddBlock = _ref => {
  let {
    editorState,
    editor,
    blocks
  } = _ref;
  let [isOpen, setIsOpen] = useState(false);
  let focusBlock = editorState.focusBlock;
  let iconRef = useRef(null);
  let menuRef = useRef(null);
  let layout = useCallback(() => {
    let iconEle = iconRef.current;
    let menuEle = menuRef.current;
    const elm = getSelectedElement();

    if (focusBlock === null || focusBlock.text !== '' || focusBlock.type !== type) {
      iconEle.style.top = "-9999px";
      iconEle.style.left = "-9999px";
      menuEle.style.top = "-9999px";
      menuEle.style.left = "-9999px";

      if (isOpen) {
        setIsOpen(false);
      }

      return;
    }

    if (elm && editor && editor.el.contains(elm)) {
      iconEle.style.top = "".concat(elm.offsetTop + elm.offsetHeight / 2, "px");
      iconEle.style.left = 0;
      menuEle.style.top = "".concat(elm.offsetTop - elm.offsetHeight / 2, "px");
      menuEle.style.left = "42px";
    } else {
      if (isOpen) {
        setIsOpen(false);
      }
    }
  }, [focusBlock, iconRef.current, menuRef.current]);
  useLayoutEffect(layout);
  return jsx(Fragment, null, jsx("div", {
    css: {
      position: 'absolute',
      zIndex: 10,
      transform: 'translate(0, -50%)',
      top: -99999,
      left: -9999
    },
    ref: iconRef
  }, jsx("button", {
    type: "button",
    css: {
      border: 'none',
      background: '#efefef',
      color: '#aaa',
      width: 24,
      height: 24,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      marginLeft: 4,
      ':hover': {
        color: '#888'
      }
    },
    onClick: () => {
      setIsOpen(x => !x);
    },
    title: "Add block"
  }, jsx(PlusIcon, {
    css: {
      transition: '50ms transform',
      transform: isOpen ? 'rotateZ(45deg)' : 'rotateZ(0deg)'
    },
    title: isOpen ? 'Close' : 'Open'
  }))), jsx("div", {
    ref: menuRef,
    css: {
      position: 'absolute',
      zIndex: 10,
      top: -99999,
      left: -9999
    }
  }, isOpen && jsx("ul", {
    css: {
      background: 'white',
      listStyle: 'none',
      padding: 0,
      margin: 0,
      border: 'solid 1px #eaeaea'
    }
  }, jsx("li", {
    css: {
      display: 'flex',
      justifyContent: 'left',
      alignItems: 'center'
    }
  }, jsx("strong", {
    css: {
      textTransform: 'uppercase',
      color: '#999',
      fontSize: '.8rem',
      padding: '5px 15px'
    }
  }, "Insert Block")), Object.keys(blocks).map(key => {
    let {
      Sidebar
    } = blocks[key];

    if (!blocks[key].withChrome || Sidebar === undefined) {
      return null;
    }

    return jsx("li", {
      css: {
        display: 'flex',
        justifyContent: 'left',
        alignItems: 'center'
      }
    }, jsx(Sidebar, {
      key: key,
      editor: editor,
      blocks: blocks
    }));
  }))));
};

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

let stopPropagation = e => {
  e.stopPropagation();
};

function InnerToolbar(_ref) {
  let {
    blocks,
    editor,
    editorState
  } = _ref;
  return jsx("div", {
    css: {
      display: 'flex'
    }
  }, Object.keys(blocks).map(x => blocks[x].withChrome && blocks[x].Toolbar).filter(x => x).reduce((children, Toolbar) => {
    return jsx(Toolbar, {
      editor: editor,
      editorState: editorState
    }, children);
  }, jsx(Fragment, null, Object.keys(marks).map(name => {
    let Icon = marks[name].icon;
    return jsx(ToolbarButton, {
      label: marks[name].label,
      icon: jsx(Icon, null),
      isActive: editorState.activeMarks.some(mark => mark.type === name),
      onClick: () => {
        editor.toggleMark(name);
        editor.focus();
      },
      key: name
    });
  }), jsx(ToolbarButton, {
    label: "Remove Formatting",
    icon: jsx(CircleSlashIcon, null),
    onClick: () => {
      markTypes.forEach(mark => {
        editor.removeMark(mark);
      });
      editor.focus();
    }
  }), Object.keys(blocks).map(type => {
    let ToolbarElement = blocks[type].ToolbarElement;

    if (!blocks[type].withChrome || ToolbarElement === undefined) {
      return null;
    }

    return jsx(ToolbarElement, {
      key: type,
      editor: editor,
      editorState: editorState
    });
  }))));
}

const PopperRender = forwardRef((_ref2, _ref3) => {
  let {
    scheduleUpdate,
    editorState,
    style,
    children
  } = _ref2;
  let {
    fragment
  } = editorState;
  let shouldShowToolbar = fragment.text !== '';
  let containerRef = useRef(null);
  let snapshot = useMeasure(containerRef);
  useLayoutEffect(() => {
    if (shouldShowToolbar) {
      scheduleUpdate();
    }
  }, [scheduleUpdate, editorState, snapshot, shouldShowToolbar]);
  return createPortal(jsx("div", {
    onMouseDown: stopPropagation,
    ref: node => {
      applyRef(_ref3, node);
      applyRef(containerRef, node);
    },
    style: style,
    css: {
      // this isn't as nice of a transition as i'd like since the time is fixed
      // i think it would better if it was physics based but that would probably
      // be a lot of work for little gain
      // maybe base the transition time on the previous value?
      transition: 'transform 100ms, opacity 100ms'
    }
  }, jsx("div", {
    css: {
      backgroundColor: colors.N90,
      padding: 8,
      borderRadius: 6,
      margin: gridSize,
      display: shouldShowToolbar ? 'flex' : 'none'
    }
  }, shouldShowToolbar && children)), document.body);
});

var Toolbar = _ref4 => {
  let {
    editorState,
    blocks,
    editor
  } = _ref4; // this element is created here so that when the popper rerenders
  // the inner toolbar won't have to update

  let children = jsx(InnerToolbar, {
    blocks: blocks,
    editor: editor,
    editorState: editorState
  });
  return jsx(Popper, {
    placement: "top",
    referenceElement: // the reason we do this rather than having the selection reference
    // be constant is because the selection reference
    // has some internal state and it shouldn't persist between different
    // editor references
    useMemo(getSelectionReference, [])
  }, _ref5 => {
    let {
      style,
      ref,
      scheduleUpdate
    } = _ref5;
    return jsx(PopperRender, {
      scheduleUpdate,
      editorState,
      style: _objectSpread({}, style, {
        zIndex: 10
      }),
      blocks,
      editor,
      ref,
      children
    });
  });
};

function getSchema(blocks) {
  const schema = {
    document: {
      last: {
        type: type
      },
      normalize: (editor, _ref) => {
        let {
          code,
          node
        } = _ref;

        switch (code) {
          case 'last_child_type_invalid':
            {
              const paragraph = Block.create(type);
              return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);
            }
        }
      }
    },
    blocks: {}
  };
  Object.keys(blocks).forEach(type => {
    if (typeof blocks[type].getSchema === 'function') {
      schema.blocks[type] = blocks[type].getSchema({
        blocks
      });
    }
  });
  return schema;
}

function Stories(_ref2) {
  let {
    value: editorState,
    onChange: _onChange,
    blocks,
    className,
    id
  } = _ref2;
  let schema = useMemo(() => {
    return getSchema(blocks);
  }, [blocks]);
  let plugins$1 = useMemo(() => {
    const renderNode = props => {
      let block = blocks[props.node.type];

      if (block) {
        return jsx(block.Node, _extends({}, props, {
          blocks: blocks
        }));
      }

      return null;
    };

    return Object.values(blocks).reduce((combinedPlugins, block) => {
      if (typeof block.getPlugins !== 'function') {
        return combinedPlugins;
      }

      return [...combinedPlugins, ...block.getPlugins({
        blocks
      })];
    }, [...plugins, {
      renderBlock: renderNode,
      renderInline: renderNode
    }]);
  }, [blocks]);
  let [editor, setEditor] = useStateWithEqualityCheck(null);
  return jsx("div", {
    className: className,
    css: {
      position: 'relative'
    },
    id: id
  }, jsx(Editor, {
    schema: schema,
    ref: setEditor,
    plugins: plugins$1,
    value: editorState,
    tabIndex: 0,
    onChange: _ref3 => {
      let {
        value
      } = _ref3;

      _onChange(value);
    }
  }), jsx(AddBlock, {
    editor: editor,
    editorState: editorState,
    blocks: blocks
  }), jsx(Toolbar, {
    editorState,
    editor,
    blocks
  }));
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class ErrorBoundary extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      hasError: false
    });
  }

  static getDerivedStateFromError() {
    return {
      hasError: true
    };
  }

  render() {
    if (this.state.hasError) {
      return jsx("span", {
        css: {
          color: colors.danger
        }
      }, "Unable to render content");
    }

    return this.props.children;
  }

}

let ContentField = _ref => {
  let {
    field,
    value,
    onChange,
    autoFocus,
    errors
  } = _ref;
  const htmlID = "ks-content-editor-".concat(field.path);
  return jsx(FieldContainer, null, jsx(FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), jsx(FieldInput, {
    css: {
      cursor: 'text',
      tabIndex: 0
    },
    onClick: () => {
      const elm = document.getElementById(htmlID).querySelector('[data-slate-editor]');

      if (elm) {
        elm.focus();
      }
    }
  }, jsx(ErrorBoundary, null, Object.values(field.getBlocks()).filter(_ref2 => {
    let {
      Provider,
      options
    } = _ref2;
    return Provider && options;
  }).reduce((children, _ref3, index) => {
    let {
      Provider,
      options
    } = _ref3;
    return (// Using index within key is ok here as the blocks never change
      // across renders
      jsx(Provider, {
        value: options,
        key: "".concat(htmlID, "-provider-").concat(index)
      }, children)
    );
  }, jsx(Stories, {
    key: htmlID,
    blocks: field.getBlocks(),
    value: value,
    onChange: onChange,
    autoFocus: autoFocus,
    id: htmlID,
    css: _objectSpread$1({}, inputStyles({
      isMultiline: true
    }), {
      padding: '16px 32px'
    })
  })))));
};

export default ContentField;
