import '@babel/runtime/helpers/esm/objectWithoutProperties';
import '@emotion/core';
import '@babel/runtime/helpers/esm/extends';
import { h as hasAncestorBlock, a as hasBlock } from './utils-6cbc3f1d.esm.js';
import { ListOrderedIcon } from '@arch-ui/icons';
import '@arch-ui/theme';
import '@arch-ui/color-utils';
import '@arch-ui/tooltip';
import '@arch-ui/typography';
import { T as ToolbarButton } from './toolbar-components-f779486c.esm.js';
import { createElement } from 'react';
import { type as type$1 } from './paragraph-c0d6d894.esm.js';
import { type as type$2 } from './list-item-ebf0ea8b.esm.js';

let handleListButtonClick = (editor, editorState, type) => {
  let isListItem = hasBlock(editorState, type$2);
  let isOrderedList = hasAncestorBlock(editorState, type);
  let otherListType = type === 'ordered-list' ? 'unordered-list' : 'ordered-list';

  if (isListItem && isOrderedList) {
    editor.setBlocks(type$1);
    editor.unwrapBlock(type);
  } else if (isListItem) {
    editor.unwrapBlock(otherListType);
    editor.wrapBlock(type);
  } else {
    editor.setBlocks(type$2).wrapBlock(type);
  }

  editor.focus();
};

let type = 'ordered-list';

function ToolbarElement(_ref) {
  let {
    editor,
    editorState
  } = _ref;
  return createElement(ToolbarButton, {
    label: "Ordered List",
    icon: createElement(ListOrderedIcon, null),
    isActive: hasAncestorBlock(editorState, type),
    onClick: () => {
      handleListButtonClick(editor, editorState, type);
    }
  });
}

function Node(_ref2) {
  let {
    attributes,
    children
  } = _ref2;
  return createElement("ol", attributes, children);
}

let getPlugins = () => [{
  onKeyDown(event, editor, next) {
    // make it so when you press enter in an empty list item,
    // the block type will change to a paragraph
    if (event.keyCode === 13 && hasAncestorBlock(editor.value, type) && editor.value.focusText.text === '') {
      editor.setBlocks(type$1).unwrapBlock(type);
      return;
    }

    next();
  }

}];

const getSchema = () => ({
  nodes: [{
    match: {
      type: type$2
    },
    min: 0
  }],

  normalize(editor, error) {
    switch (error.code) {
      case 'child_type_invalid':
        {
          editor.unwrapBlockByKey(error.node.key, type);
          return;
        }
    }
  }

});

export { Node, ToolbarElement, getPlugins, getSchema, type };
