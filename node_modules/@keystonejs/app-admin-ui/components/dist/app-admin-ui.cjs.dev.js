'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var React = require('react');
var React__default = _interopDefault(React);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const ListContext = React.createContext();
const useList = () => {
  const {
    list,
    isCreateItemModalOpen,
    openCreateItemModal,
    closeCreateItemModal
  } = React.useContext(ListContext);

  if (!list) {
    throw new Error('useList used before List is initialised');
  }

  return {
    list,
    isCreateItemModalOpen,
    openCreateItemModal,
    closeCreateItemModal
  };
};
const ListProvider = (_ref) => {
  let {
    list,
    children
  } = _ref;
  const [modals, setModalsOpen] = React.useState({
    [list.key]: false
  });
  const isOpen = modals[list.key];

  const openCreateItemModal = () => {
    setModalsOpen(_objectSpread({}, modals, {
      [list.key]: true
    }));
  };

  const closeCreateItemModal = () => {
    setModalsOpen(_objectSpread({}, modals, {
      [list.key]: false
    }));
  };

  return React__default.createElement(ListContext.Provider, {
    value: {
      list,
      isCreateItemModalOpen: isOpen,
      openCreateItemModal,
      closeCreateItemModal
    }
  }, children);
};

exports.ListProvider = ListProvider;
exports.useList = useList;
