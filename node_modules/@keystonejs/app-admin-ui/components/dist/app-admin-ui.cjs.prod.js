"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), React = require("react"), React__default = _interopDefault(React);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const ListContext = React.createContext(), useList = () => {
  const {list: list, isCreateItemModalOpen: isCreateItemModalOpen, openCreateItemModal: openCreateItemModal, closeCreateItemModal: closeCreateItemModal} = React.useContext(ListContext);
  if (!list) throw new Error("useList used before List is initialised");
  return {
    list: list,
    isCreateItemModalOpen: isCreateItemModalOpen,
    openCreateItemModal: openCreateItemModal,
    closeCreateItemModal: closeCreateItemModal
  };
}, ListProvider = _ref => {
  let {list: list, children: children} = _ref;
  const [modals, setModalsOpen] = React.useState({
    [list.key]: !1
  }), isOpen = modals[list.key];
  return React__default.createElement(ListContext.Provider, {
    value: {
      list: list,
      isCreateItemModalOpen: isOpen,
      openCreateItemModal: () => {
        setModalsOpen(_objectSpread({}, modals, {
          [list.key]: !0
        }));
      },
      closeCreateItemModal: () => {
        setModalsOpen(_objectSpread({}, modals, {
          [list.key]: !1
        }));
      }
    }
  }, children);
};

exports.ListProvider = ListProvider, exports.useList = useList;
