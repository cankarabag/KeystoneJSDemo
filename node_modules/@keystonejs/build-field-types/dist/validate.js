"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateEntrypointSource = validateEntrypointSource;
exports.isMainFieldValid = isMainFieldValid;
exports.isModuleFieldValid = isModuleFieldValid;
exports.validateEntrypoint = validateEntrypoint;
exports.default = validate;

var _project = require("./project");

var _messages = require("./messages");

var _errors = require("./errors");

var _utils = require("./utils");

var _constants = require("./constants");

var logger = _interopRequireWildcard(require("./logger"));

var _resolve = _interopRequireDefault(require("resolve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// this doesn't offer to fix anything
// just does validation
// used in build and watch
function validateEntrypointSource(entrypoint) {
  try {
    _resolve.default.sync(entrypoint.source, {
      extensions: _constants.EXTENSIONS
    });
  } catch (e) {
    if (e.code === 'MODULE_NOT_FOUND') {
      throw new _errors.FatalError(_messages.errors.noSource(entrypoint.configSource), entrypoint);
    }

    throw e;
  }
}

function isMainFieldValid(entrypoint) {
  return entrypoint.main === (0, _utils.getValidMainField)(entrypoint.package.name);
}

function isModuleFieldValid(entrypoint) {
  return entrypoint.module === (0, _utils.getValidModuleField)(entrypoint.package.name);
}

function validateEntrypoint(entrypoint, log) {
  validateEntrypointSource(entrypoint);

  if (log) {
    logger.info(_messages.infos.validEntrypoint, entrypoint);
  }

  if (!isMainFieldValid(entrypoint)) {
    throw new _errors.FixableError(_messages.errors.invalidMainField, entrypoint);
  }

  if (log) {
    logger.info(_messages.infos.validMainField, entrypoint);
  }

  if (!isModuleFieldValid(entrypoint)) {
    throw new _errors.FixableError(_messages.errors.invalidModuleField, entrypoint);
  }

  if (log) {
    logger.info(_messages.infos.validModuleField, entrypoint);
  }
}

async function validate(directory) {
  let project = await _project.Project.create(directory);

  for (let pkg of project.packages) {
    for (let entrypoint of pkg.entrypoints) {
      validateEntrypoint(entrypoint, true);
    }
  }

  logger.success(_messages.successes.validProject);
}