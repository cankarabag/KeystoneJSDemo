"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Item = void 0;

var fs = _interopRequireWildcard(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _sarcastic = _interopRequireDefault(require("sarcastic"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let itemsByPath = {};

class Item {
  constructor(filePath, contents) {
    this.json = (0, _sarcastic.default)(JSON.parse(contents), _sarcastic.default.object);
    this._stringifiedSavedJson = JSON.stringify(this.json, null, 2);
    this._contents = contents;
    this.path = filePath;
    this.directory = _path.default.dirname(filePath);
    this._config = this.json[_constants.PKG_JSON_CONFIG_FIELD] || {};

    if (itemsByPath[this.path] === undefined) {
      itemsByPath[this.path] = new Set();
    }

    itemsByPath[this.path].add(this);
  }

  updater(json) {
    this.json = json;
  }

  async refresh() {
    let contents = await fs.readFile(this.path, 'utf-8');
    let json = (0, _sarcastic.default)(JSON.parse(contents), _sarcastic.default.object);

    for (let item of itemsByPath[this.path]) {
      item.updater(json);
    }
  }

  async save() {
    if (Object.keys(this._config).length) {
      this.json[_constants.PKG_JSON_CONFIG_FIELD] = this._config;
    } else {
      delete this.json[_constants.PKG_JSON_CONFIG_FIELD];
    }

    let stringified = JSON.stringify(this.json, null, 2);

    if (stringified !== this._stringifiedSavedJson) {
      await fs.writeFile(this.path, JSON.stringify(this.json, null, 2) + '\n');
      this._config = this.json[_constants.PKG_JSON_CONFIG_FIELD] || {};

      for (let item of itemsByPath[this.path]) {
        item.updater(this.json);
      }

      this._stringifiedSavedJson = stringified;
      return true;
    }

    return false;
  }

}

exports.Item = Item;