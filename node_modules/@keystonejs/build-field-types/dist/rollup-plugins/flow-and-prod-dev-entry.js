"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flowAndNodeDevProdEntry;

var _path = _interopRequireDefault(require("path"));

var _workerClient = require("../worker-client");

var _hash = _interopRequireDefault(require("@emotion/hash"));

var fse = _interopRequireWildcard(require("fs-extra"));

var _fs = _interopRequireDefault(require("fs"));

function transformStuff(format, code, pkgDir, filename) {
  if (format === 'cjs') {
    return (0, _workerClient.getWorker)().transformBabel(code, JSON.stringify({
      babelrc: false,
      configFile: false,
      sourceType: 'script',
      plugins: [require.resolve('../babel-plugins/rewrite-cjs-runtime-helpers'), [require.resolve('../babel-plugins/ks-field-types-render-chunk'), {
        pkgDir,
        filename
      }]]
    })).then(output => output.code + '\n');
  }

  if (format === 'es') {
    return (0, _workerClient.getWorker)().transformBabel(code, JSON.stringify({
      babelrc: false,
      configFile: false,
      plugins: [require.resolve('@babel/plugin-syntax-dynamic-import'), [require.resolve('../babel-plugins/ks-field-types-render-chunk'), {
        pkgDir,
        filename
      }]]
    })).then(output => output.code + '\n');
  }

  throw new Error('unknown case');
}

let map = new WeakMap();

function flowAndNodeDevProdEntry() {
  return {
    name: 'flow-and-prod-dev-entry',

    async generateBundle(opts, bundle) {
      map.set(this.addWatchFile, opts.dir);
      let chunkKeys = Object.keys(bundle).filter( // $FlowFixMe this is acceptable to have non existent isAsset
      x => !bundle[x].isAsset);
      let format = opts.format;
      let pkgDir = opts.dir;
      await Promise.all(chunkKeys.map(async key => {
        let file = bundle[key];
        file.code = await transformStuff(format, file.code, pkgDir, file.fileName);
      }));
    },

    async writeBundle(bundle) {
      let pkgDir = map.get(this.addWatchFile);

      if (!pkgDir) {
        throw new Error('pkgDir not found, this is likely a bug in build-field-types. Please open an issue with a reproduction.');
      }

      for (const n in bundle) {
        const file = bundle[n];
        const facadeModuleId = typeof file.facadeModuleId === 'string' ? file.facadeModuleId : null;

        if (!file.isAsset && file.isDynamicEntry && facadeModuleId != null) {
          let hash = (0, _hash.default)(_path.default.relative(pkgDir, facadeModuleId));

          let pkgJsonFileName = _path.default.join(pkgDir, 'dist', hash, 'package.json');

          let pkgJsonField = file.fileName.endsWith('.esm.js') ? 'module' : 'main';
          let json = {};

          try {
            json = JSON.parse(_fs.default.readFileSync(pkgJsonFileName, 'utf8'));
          } catch (err) {
            if (err.code !== 'ENOENT') {
              throw err;
            }
          }

          json[pkgJsonField] = _path.default.relative(_path.default.dirname(pkgJsonFileName), _path.default.join(pkgDir, file.fileName));
          fse.ensureFileSync(pkgJsonFileName);

          _fs.default.writeFileSync(pkgJsonFileName, JSON.stringify(json, null, 2) + '\n');
        }
      }
    }

  };
}