"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Package = void 0;

var _sarcastic = _interopRequireDefault(require("sarcastic"));

var _globby = _interopRequireDefault(require("globby"));

var fs = _interopRequireWildcard(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _item = require("./item");

var _entrypoint = require("./entrypoint");

var _errors = require("./errors");

var _messages = require("./messages");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// based on https://github.com/jamiebuilds/std-pkg but reading fewer things, adding setters and reading the file

/*::
import {Project} from './project'
*/
class Package extends _item.Item {
  get configEntrypoints() {
    return (0, _sarcastic.default)(this._config.entrypoints, _sarcastic.default.default(_sarcastic.default.arrayOf(_sarcastic.default.string), ['.']));
  }

  static async create(directory) {
    let filePath = _path.default.join(directory, 'package.json');

    let contents = await fs.readFile(filePath, 'utf-8');
    let pkg = new Package(filePath, contents);
    let entrypointDirectories = await (0, _globby.default)(pkg.configEntrypoints, {
      cwd: pkg.directory,
      onlyDirectories: true,
      absolute: true,
      expandDirectories: false
    });
    pkg.entrypoints = await Promise.all(entrypointDirectories.map(async directory => {
      let filename = _path.default.join(directory, 'package.json');

      let contents = null;

      try {
        contents = await fs.readFile(filename, 'utf-8');
      } catch (e) {
        if (e.code !== 'ENOENT') {
          throw e;
        }
      }

      return {
        filename,
        contents
      };
    })).then(descriptors => {
      return Promise.all(descriptors.map(async ({
        filename,
        contents
      }) => {
        if (contents === null) {
          let shouldCreateEntrypointPkgJson = await _messages.confirms.createEntrypointPkgJson({
            name: _path.default.join(pkg.name, _path.default.relative(pkg.directory, directory))
          });

          if (!shouldCreateEntrypointPkgJson) {
            throw new _errors.FatalError(_messages.errors.noEntrypointPkgJson, {
              name: _path.default.join(pkg.name, _path.default.relative(pkg.directory, directory))
            });
          }

          contents = JSON.stringify({
            main: (0, _utils.getValidMainField)(pkg.name),
            module: (0, _utils.getValidModuleField)(pkg.name)
          }, null, 2);
          await fs.writeFile(filename, contents);
        }

        return new _entrypoint.Entrypoint(filename, contents, pkg);
      }));
    });
    return pkg;
  }

  setFieldOnEntrypoints(field) {
    this.entrypoints.forEach(entrypoint => {
      switch (field) {
        case 'main':
          {
            entrypoint.main = (0, _utils.getValidMainField)(this.name);
            break;
          }

        case 'module':
          {
            entrypoint.module = (0, _utils.getValidModuleField)(this.name);
            break;
          }
      }
    });
  }

  get name() {
    return (0, _sarcastic.default)(this.json.name, _sarcastic.default.string);
  }

  set name(name) {
    this.json.name = name;
  }

  get dependencies() {
    return (0, _sarcastic.default)(this.json.dependencies, _sarcastic.default.maybe(_sarcastic.default.objectOf(_sarcastic.default.string)));
  }

  get peerDependencies() {
    return (0, _sarcastic.default)(this.json.peerDependencies, _sarcastic.default.maybe(_sarcastic.default.objectOf(_sarcastic.default.string)));
  }

}

exports.Package = Package;