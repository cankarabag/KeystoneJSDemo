"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = build;

var _project = require("../project");

var _path = _interopRequireDefault(require("path"));

var _rollup = require("./rollup");

var _aliases = require("./aliases");

var logger = _interopRequireWildcard(require("../logger"));

var fs = _interopRequireWildcard(require("fs-extra"));

var _config = require("./config");

var _workerClient = require("../worker-client");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function buildPackage(pkg, aliases) {
  let configs = (0, _config.getRollupConfigs)(pkg, aliases);
  await Promise.all([fs.remove(_path.default.join(pkg.directory, 'dist')), ...pkg.entrypoints.map(entrypoint => {
    return fs.remove(_path.default.join(entrypoint.directory, 'dist'));
  })]);
  await Promise.all(configs.map(async ({
    config,
    outputs
  }) => {
    let bundle = await (0, _rollup.rollup)(config);
    await Promise.all(outputs.map(outputConfig => {
      return bundle.write(outputConfig);
    }));
  }));
}

async function retryableBuild(pkg, aliases) {
  try {
    await buildPackage(pkg, aliases);
  } catch (err) {
    if (err instanceof Promise) {
      await err;
      await retryableBuild(pkg, aliases);
      return;
    }

    throw err;
  }
}

async function build(directory) {
  try {
    (0, _workerClient.createWorker)();
    let project = await _project.Project.create(directory);
    logger.info('building bundles!');
    let aliases = (0, _aliases.getAliases)(project);
    await Promise.all(project.packages.map(pkg => retryableBuild(pkg, aliases)));
    logger.success('built bundles!');
  } finally {
    (0, _workerClient.destroyWorker)();
  }
}