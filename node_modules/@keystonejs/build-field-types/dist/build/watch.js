"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = build;

var _project = require("../project");

var _rollup = require("rollup");

var _chalk = _interopRequireDefault(require("chalk"));

var _path = _interopRequireDefault(require("path"));

var _ms = _interopRequireDefault(require("ms"));

var fs = _interopRequireWildcard(require("fs-extra"));

var _config = require("./config");

var _aliases = require("./aliases");

var _rollup2 = require("./rollup");

var _logger = require("../logger");

var _messages = require("../messages");

var _workerClient = require("../worker-client");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function relativePath(id) {
  return _path.default.relative(process.cwd(), String(id));
}

async function watchPackage(pkg, aliases) {
  const _configs = (0, _config.getRollupConfigs)(pkg, aliases);

  await Promise.all([fs.remove(_path.default.join(pkg.directory, 'dist')), ...pkg.entrypoints.map(entrypoint => {
    return fs.remove(_path.default.join(entrypoint.directory, 'dist'));
  })]);

  let configs = _configs.map(config => {
    return _objectSpread({}, (0, _rollup2.toUnsafeRollupConfig)(config.config), {
      output: config.outputs
    });
  });

  const watcher = (0, _rollup.watch)(configs);
  let reject;
  let errPromise = new Promise((resolve, _reject) => {
    reject = _reject;
  });
  let startResolve;
  let startPromise = new Promise(resolve => {
    startResolve = resolve;
  });
  watcher.on('event', event => {
    // https://github.com/rollup/rollup/blob/aed954e4e6e8beabd47268916ff0955fbb20682d/bin/src/run/watch.ts#L71-L115
    switch (event.code) {
      case 'FATAL':
        {
          reject(event.error);
          break;
        }

      case 'ERROR':
        {
          reject(event.error);
          break;
        }

      case 'START':
        startResolve();
        break;

      case 'BUNDLE_START':
        {
          (0, _logger.info)(_chalk.default.cyan(`bundles ${_chalk.default.bold(typeof event.input === 'string' ? relativePath(event.input) : Array.isArray(event.input) ? event.input.map(relativePath).join(', ') : Object.values(event.input).map(relativePath).join(', '))} â†’ ${_chalk.default.bold(event.output.map(relativePath).join(', '))}...`), pkg);
          break;
        }

      case 'BUNDLE_END':
        {
          (0, _logger.info)(_chalk.default.green(`created ${_chalk.default.bold(event.output.map(relativePath).join(', '))} in ${_chalk.default.bold((0, _ms.default)(event.duration))}`), pkg);
          break;
        }

      case 'END':
        {
          (0, _logger.info)('waiting for changes...', pkg);
        }
    }
  });
  return {
    error: errPromise,
    start: startPromise
  };
}

async function retryableWatch(pkg, aliases, getPromises, depth) {
  try {
    let {
      error,
      start
    } = await watchPackage(pkg, aliases);

    if (depth === 0) {
      getPromises({
        start
      });
    }

    await error;
  } catch (err) {
    if (err instanceof Promise) {
      await err;
      await retryableWatch(pkg, aliases, getPromises, depth + 1);
      return;
    }

    throw err;
  }
}

async function build(directory) {
  (0, _workerClient.createWorker)();
  let project = await _project.Project.create(directory); // do more stuff with checking whether the repo is using yarn workspaces or bolt

  let aliases = (0, _aliases.getAliases)(project);
  let startCount = 0;
  await Promise.all(project.packages.map(pkg => retryableWatch(pkg, aliases, async ({
    start
  }) => {
    await start;
    startCount++;

    if (startCount === project.packages.length) {
      (0, _logger.success)(_messages.successes.startedWatching);
    }
  }, 0)));
}