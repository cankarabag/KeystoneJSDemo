"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPromptConfirmLoader = createPromptConfirmLoader;
exports.promptInput = exports.limit = void 0;

var _inquirer = _interopRequireDefault(require("inquirer"));

var _pLimit = _interopRequireDefault(require("p-limit"));

var _dataloader = _interopRequireDefault(require("dataloader"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let limit = (0, _pLimit.default)(1); // there might be a simpler solution to this than using dataloader but it works so ¯\_(ツ)_/¯

exports.limit = limit;
let prefix = `🎁 ${_chalk.default.green('?')}`;

function createPromptConfirmLoader(message) {
  let loader = new _dataloader.default(pkgs => limit(() => (async () => {
    if (pkgs.length === 1) {
      let {
        confirm
      } = await _inquirer.default.prompt([{
        type: 'confirm',
        name: 'confirm',
        message,
        prefix: prefix + ' ' + pkgs[0].name
      }]);
      return [confirm];
    }

    let {
      answers
    } = await _inquirer.default.prompt([{
      type: 'checkbox',
      name: 'answers',
      message,
      choices: pkgs.map(pkg => ({
        name: pkg.name,
        checked: true
      })),
      prefix
    }]);
    return pkgs.map(pkg => {
      return answers.includes(pkg.name);
    });
  })(), {
    cache: false
  }));
  return pkg => loader.load(pkg);
}

let doPromptInput = async (message, pkg, defaultAnswer) => {
  let {
    input
  } = await _inquirer.default.prompt([{
    type: 'input',
    name: 'input',
    message,
    prefix: prefix + ' ' + pkg.name,
    default: defaultAnswer
  }]);
  return input;
};

let promptInput = (message, pkg, defaultAnswer) => limit(() => doPromptInput(message, pkg, defaultAnswer));

exports.promptInput = promptInput;