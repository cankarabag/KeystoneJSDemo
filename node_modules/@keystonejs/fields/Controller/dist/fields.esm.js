import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import isEqual from 'lodash.isequal';

var FieldController = function FieldController(config, list, adminMeta, views) {
  var _this = this;

  _classCallCheck(this, FieldController);

  _defineProperty(this, "getQueryFragment", function () {
    return _this.path;
  });

  _defineProperty(this, "serialize", function (data) {
    return data[_this.path] || null;
  });

  _defineProperty(this, "validateInput", function () {});

  _defineProperty(this, "deserialize", function (data) {
    return data[_this.path];
  });

  _defineProperty(this, "hasChanged", function (initialData, currentData) {
    return !isEqual(initialData[_this.path], currentData[_this.path]);
  });

  _defineProperty(this, "getDefaultValue", function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$originalInput = _ref.originalInput,
        originalInput = _ref$originalInput === void 0 ? {} : _ref$originalInput,
        _ref$prefill = _ref.prefill,
        prefill = _ref$prefill === void 0 ? {} : _ref$prefill;

    return _this._getDefaultValue({
      originalInput: originalInput,
      prefill: prefill
    });
  });

  _defineProperty(this, "initCellView", function () {
    var Cell = _this.views.Cell;

    if (!Cell) {
      return;
    }

    _this.adminMeta.readViews([Cell]);
  });

  _defineProperty(this, "initFieldView", function () {
    var Field = _this.views.Field;

    if (!Field) {
      return;
    }

    _this.adminMeta.readViews([Field]);
  });

  _defineProperty(this, "initFilterView", function () {
    var Filter = _this.views.Filter;

    if (!Filter) {
      return;
    }

    _this.adminMeta.readViews([Filter]);
  });

  _defineProperty(this, "getFilterTypes", function () {
    return [];
  });

  this.config = config;
  this.label = config.label;
  this.path = config.path;
  this.type = config.type;
  this.maybeAccess = config.access;
  this.isPrimaryKey = config.isPrimaryKey;
  this.list = list;
  this.adminMeta = adminMeta;
  this.views = views;

  if ('defaultValue' in config) {
    if (typeof config.defaultValue !== 'function') {
      this._getDefaultValue = function (_ref2) {
        var prefill = _ref2.prefill;
        return prefill[_this.path] || config.defaultValue;
      };
    } else {
      this._getDefaultValue = config.defaultValue;
    }
  } else {
    // By default, the default value is undefined
    this._getDefaultValue = function (_ref3) {
      var prefill = _ref3.prefill;
      return prefill[_this.path] || undefined;
    };
  }
} // TODO: This is a bad default; we should (somehow?) inspect the fields provided
// by the implementations gqlOutputFields
;

export default FieldController;
