import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import '@babel/runtime/helpers/esm/classCallCheck';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class CheckboxController extends FieldController {
  constructor(config) {
    const defaultValue = 'defaultValue' in config ? config.defaultValue : false;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(_objectSpread({}, config, {
      defaultValue
    }), ...args);

    _defineProperty(this, "serialize", data => data[this.path]);

    _defineProperty(this, "deserialize", data => data[this.path]);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let {
        type,
        value
      } = _ref;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": ").concat(value);
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let {
        label
      } = _ref2;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let {
        label,
        value
      } = _ref3;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is',
      getInitialValue: () => 'true'
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => 'true'
    }]);
  }

}

export default CheckboxController;
