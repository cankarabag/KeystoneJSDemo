'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var alert = require('@arch-ui/alert');

var React = require('react');

var React__default = _interopDefault(React);

var icons = require('@arch-ui/icons');

var button = require('@arch-ui/button');

var input = require('@arch-ui/input');

var layout = require('@arch-ui/layout');

var typography = require('@arch-ui/typography');

class PasswordField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "focusTarget", React.createRef());

    _defineProperty(this, "state", {
      isEditing: false,
      showInputValue: false,
      inputPassword: '',
      inputConfirm: ''
    });

    _defineProperty(this, "onChange", _ref => {
      let {
        target
      } = _ref;
      const {
        name,
        value
      } = target;
      this.setState(_ref2 => {
        let {
          inputPassword,
          inputConfirm
        } = _ref2;
        this.props.onChange({
          inputPassword,
          inputConfirm,
          [name]: value
        });
        return {
          [name]: value
        };
      });
    });

    _defineProperty(this, "toggleInterface", () => {
      function maybeFocus() {
        if (this.state.isEditing && this.focusTarget.current) {
          this.focusTarget.current.focus();
        }
      }

      this.setState(state => ({
        isEditing: !state.isEditing
      }), maybeFocus);
    });

    _defineProperty(this, "toggleMode", () => {
      this.setState(state => ({
        showInputValue: !state.showInputValue
      }));
    });
  }

  render() {
    const {
      isEditing,
      inputPassword,
      inputConfirm,
      showInputValue
    } = this.state;
    const {
      autoFocus,
      field,
      value: serverValue,
      errors,
      warnings
    } = this.props;
    const value = serverValue || '';
    const htmlID = "ks-input-".concat(field.path);
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(fields.FieldInput, null, isEditing ? core.jsx(layout.FlexGroup, {
      growIndexes: [0, 1]
    }, core.jsx(input.Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      id: htmlID,
      ref: this.focusTarget,
      name: "inputPassword",
      onChange: this.onChange,
      placeholder: "New Password",
      type: showInputValue ? 'text' : 'password',
      value: inputPassword
    }), core.jsx(input.Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      id: "".concat(htmlID, "-confirm"),
      name: "inputConfirm",
      onChange: this.onChange,
      placeholder: "Confirm Password",
      type: showInputValue ? 'text' : 'password',
      value: inputConfirm
    }), core.jsx(button.Button, {
      isActive: showInputValue,
      onClick: this.toggleMode,
      title: showInputValue ? 'Hide Text' : 'Show Text',
      variant: "ghost"
    }, core.jsx(typography.A11yText, null, showInputValue ? 'Hide Text' : 'Show Text'), core.jsx("div", {
      css: {
        width: 20
      }
    }, showInputValue ? core.jsx(icons.LockIcon, null) : core.jsx(icons.EyeIcon, null)))) : core.jsx(button.Button, {
      id: "".concat(htmlID, "-button"),
      onClick: this.toggleInterface,
      variant: "ghost"
    }, value ? 'Update Password' : 'Set Password')), errors.length ? errors.map(_ref3 => {
      let {
        message,
        data
      } = _ref3;
      return core.jsx(alert.Alert, {
        appearance: "danger",
        key: message
      }, message, data ? " - ".concat(JSON.stringify(data)) : null);
    }) : null, warnings.length ? warnings.map(_ref4 => {
      let {
        message,
        data
      } = _ref4;
      return core.jsx(alert.Alert, {
        appearance: "warning",
        key: message
      }, message, data ? " - ".concat(JSON.stringify(data)) : null);
    }) : null);
  }

}

exports.default = PasswordField;
