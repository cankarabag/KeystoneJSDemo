'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

class TextController extends fields.default {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let {
        type,
        value
      } = _ref;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let {
        label
      } = _ref2;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let {
        label,
        value
      } = _ref3;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'contains_i',
      label: 'Contains',
      getInitialValue: () => ''
    }, {
      type: 'not_contains_i',
      label: 'Does not contain',
      getInitialValue: () => ''
    }, {
      type: 'is_i',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not_i',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'starts_with_i',
      label: 'Starts with',
      getInitialValue: () => ''
    }, {
      type: 'not_starts_with_i',
      label: 'Does not start with',
      getInitialValue: () => ''
    }, {
      type: 'ends_with_i',
      label: 'Ends with',
      getInitialValue: () => ''
    }, {
      type: 'not_ends_with_i',
      label: 'Does not end with',
      getInitialValue: () => ''
    }]);
  }

}

exports.default = TextController;
