import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { jsx } from '@emotion/core';
import { FieldContainer, FieldLabel, FieldDescription, FieldInput } from '@arch-ui/fields';
import { Component } from 'react';
import _extends from '@babel/runtime/helpers/esm/extends';
import Select from '@arch-ui/select';

class SelectField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", option => {
      this.props.onChange(option ? option.value : null);
    });
  }

  render() {
    const {
      autoFocus,
      field,
      value: serverValue,
      renderContext,
      errors
    } = this.props;
    const value = field.options.find(i => i.value === serverValue);
    const htmlID = "ks-input-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    const selectProps = renderContext === 'dialog' ? {
      menuPortalTarget: document.body,
      menuShouldBlockScroll: true
    } : null;
    return jsx(FieldContainer, null, jsx(FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && jsx(FieldDescription, null, field.config.adminDoc), jsx(FieldInput, null, jsx("div", {
      css: {
        flex: 1
      }
    }, jsx(Select, _extends({
      autoFocus: autoFocus,
      value: canRead ? value : undefined,
      placeholder: canRead ? undefined : error.message,
      options: field.options,
      onChange: this.onChange,
      isClearable: true,
      id: "react-select-".concat(htmlID),
      inputId: htmlID,
      instanceId: htmlID
    }, selectProps)))));
  }

}

export default SelectField;
