import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { jsx } from '@emotion/core';
import { FieldContainer, FieldDescription } from '@arch-ui/fields';
import { Component } from 'react';
import { colors, gridSize } from '@arch-ui/theme';
import { ShieldIcon } from '@arch-ui/icons';
import { P as PrettyData } from './prettyData-ef440754.esm.js';

const FieldLabel = props => {
  const accessError = (props.errors || []).find(error => error instanceof Error && error.name === 'AccessDeniedError');
  return jsx("span", {
    css: {
      color: colors.N60,
      fontSize: '0.9rem',
      fontWeight: 500,
      paddingBottom: gridSize,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    htmlFor: props.htmlFor
  }, props.field.label, accessError ? jsx(ShieldIcon, {
    title: accessError.message,
    css: {
      color: colors.N20,
      marginRight: '1em'
    }
  }) : null);
};

class VirtualField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange(event.target.value);
    });
  }

  render() {
    const {
      field,
      errors,
      value: serverValue
    } = this.props;
    const value = serverValue || '';
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    return jsx(FieldContainer, null, jsx(FieldLabel, {
      field: field,
      errors: errors
    }), field.config.adminDoc && jsx(FieldDescription, null, field.config.adminDoc), jsx(PrettyData, {
      data: canRead ? value : undefined
    }));
  }

}

export default VirtualField;
export { FieldLabel };
