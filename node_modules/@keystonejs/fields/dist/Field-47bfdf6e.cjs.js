'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var theme = require('@arch-ui/theme');

var icons = require('@arch-ui/icons');

var prettyData = require('./prettyData-13cecbde.cjs.js');

const FieldLabel = props => {
  const accessError = (props.errors || []).find(error => error instanceof Error && error.name === 'AccessDeniedError');
  return core.jsx("span", {
    css: {
      color: theme.colors.N60,
      fontSize: '0.9rem',
      fontWeight: 500,
      paddingBottom: theme.gridSize,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    htmlFor: props.htmlFor
  }, props.field.label, accessError ? core.jsx(icons.ShieldIcon, {
    title: accessError.message,
    css: {
      color: theme.colors.N20,
      marginRight: '1em'
    }
  }) : null);
};

class VirtualField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange(event.target.value);
    });
  }

  render() {
    const {
      field,
      errors,
      value: serverValue
    } = this.props;
    const value = serverValue || '';
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    return core.jsx(fields.FieldContainer, null, core.jsx(FieldLabel, {
      field: field,
      errors: errors
    }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(prettyData.PrettyData, {
      data: canRead ? value : undefined
    }));
  }

}

exports.FieldLabel = FieldLabel;
exports.default = VirtualField;
