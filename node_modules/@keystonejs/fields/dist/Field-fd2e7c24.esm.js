import { jsx } from '@emotion/core';
import { FieldContainer, FieldLabel, FieldDescription, FieldInput } from '@arch-ui/fields';
import { useMemo, Fragment } from 'react';
import _extends from '@babel/runtime/helpers/esm/extends';
import { Button } from '@arch-ui/button';
import Popout from '@arch-ui/popout';
import SketchPicker from 'react-color/lib/Sketch';

const ColorField = _ref => {
  let {
    field,
    value: serverValue,
    errors,
    onChange: _onChange
  } = _ref;
  const value = serverValue || '';
  const htmlID = "ks-input-".concat(field.path);
  const colorPickerValue = useMemo(() => {
    // keystone previously stored values as a hex string and this should still be supported
    // it is now stored as an rgba string
    if (value) {
      if (value.indexOf('rgba', 0) === 0) {
        const rgbaValues = value.replace(/^rgba\(|\s+|\)$/g, '').split(',');
        return {
          r: rgbaValues[0],
          g: rgbaValues[1],
          b: rgbaValues[2],
          a: rgbaValues[3]
        };
      }

      return value;
    }

    return '';
  }, [value]);

  const target = props => jsx(Button, _extends({}, props, {
    variant: "ghost"
  }), value ? jsx(Fragment, null, jsx("div", {
    style: {
      // using inline styles instead of emotion for setting the color
      // since emotion doesn't escape styles so it could be used for CSS injection
      // this is also better in terms of memory since the value can change a lot
      // and emotion caches everything
      backgroundColor: value
    },
    css: {
      borderRadius: 3,
      display: 'inline-block',
      height: 18,
      width: 18,
      marginRight: 10,
      verticalAlign: 'middle'
    }
  }), jsx("span", {
    css: {
      verticalAlign: 'middle'
    }
  }, value)) : 'Set Color');

  return jsx(FieldContainer, null, jsx(FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), field.config.adminDoc && jsx(FieldDescription, null, field.config.adminDoc), jsx(FieldInput, null, jsx(Popout, {
    width: 220,
    target: target
  }, jsx(SketchPicker, {
    css: {
      // using !important because react-color uses inline styles and applies a box shadow
      // but Popout already applies a box shadow
      boxShadow: 'none !important'
    },
    presetColors: [],
    color: colorPickerValue,
    onChange: _ref2 => {
      let {
        rgb: {
          r,
          g,
          b,
          a
        }
      } = _ref2;

      _onChange("rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")"));
    }
  }))));
};

export default ColorField;
