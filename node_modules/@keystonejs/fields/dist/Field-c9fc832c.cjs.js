'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var input = require('@arch-ui/input');

class UuidField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange(event.target.value);
    });
  }

  render() {
    const {
      autoFocus,
      field,
      errors,
      value: serverValue
    } = this.props;
    const value = serverValue || '';
    const htmlID = "ks-input-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(fields.FieldInput, null, core.jsx(input.Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "text",
      value: canRead ? value : undefined,
      placeholder: canRead ? undefined : error.message,
      onChange: this.onChange,
      id: htmlID
    })));
  }

}

exports.default = UuidField;
