'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

var dateFns = require('date-fns');

class CalendarDayController extends fields.default {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let {
        type,
        value
      } = _ref;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let {
        label
      } = _ref2;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let {
        label,
        value
      } = _ref3;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "serialize", data => {
      const value = data[this.path];

      if (typeof value !== 'string') {
        return null;
      }

      return value.trim() || null;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'gt',
      label: 'Is after',
      getInitialValue: () => ''
    }, {
      type: 'lt',
      label: 'Is before',
      getInitialValue: () => ''
    }, {
      type: 'gte',
      label: 'Is after or equal to',
      getInitialValue: () => ''
    }, {
      type: 'lte',
      label: 'Is before or equal to',
      getInitialValue: () => ''
    } // QUESTION: should we support "in" and "not_in" filters for DateTime?
    // What does the UI look like for that.
    ]);

    _defineProperty(this, "validateInput", _ref4 => {
      let {
        resolvedData,
        addFieldValidationError
      } = _ref4;
      const {
        yearRangeFrom,
        yearRangeTo
      } = this.config;
      const inputYear = dateFns.getYear(resolvedData[this.path]);
      const inRange = yearRangeFrom <= inputYear && inputYear <= yearRangeTo;

      if (!inRange) {
        return addFieldValidationError("Input not within configured date interval.");
      }
    });
  }

}

exports.default = CalendarDayController;
