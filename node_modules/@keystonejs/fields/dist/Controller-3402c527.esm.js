import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import '@babel/runtime/helpers/esm/classCallCheck';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

class PasswordController extends FieldController {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let {
        type,
        value
      } = _ref;
      return "".concat(this.path, "_").concat(type, ": ").concat(value ? 'true' : 'false');
    });

    _defineProperty(this, "getFilterLabel", () => {
      return "".concat(this.label);
    });

    _defineProperty(this, "formatFilter", _ref2 => {
      let {
        value
      } = _ref2;
      return "".concat(this.label, " ").concat(value ? 'is set' : 'is not set');
    });

    _defineProperty(this, "getQueryFragment", () => "".concat(this.path, "_is_set"));

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is_set',
      label: 'Is Set',
      getInitialValue: () => true
    }]);

    _defineProperty(this, "serialize", data => {
      // discard the "confirm" since we only need one version of the password
      return data[this.path] ? data[this.path].inputPassword : undefined;
    });

    _defineProperty(this, "validateInput", _ref3 => {
      let {
        originalInput,
        addFieldValidationError
      } = _ref3;
      const {
        isRequired,
        minLength
      } = this.config;

      if (isRequired) {
        if (!originalInput[this.path] || !originalInput[this.path].inputPassword) {
          return addFieldValidationError("Password is required");
        }
      } else if (!originalInput[this.path] || !originalInput[this.path].inputPassword) {
        //no password required and no password is set so just return
        return;
      }

      if (originalInput[this.path].inputPassword.length < minLength) {
        return addFieldValidationError("Password must be at least ".concat(minLength, " characters"));
      }

      if (originalInput[this.path].inputPassword !== originalInput[this.path].inputConfirm) {
        return addFieldValidationError('Passwords do not match');
      }
    });
  }

}

export default PasswordController;
