import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import pluralize from 'pluralize';
import { jsx } from '@emotion/core';
import { createContext, useContext, Fragment, useState, useCallback } from 'react';
import _extends from '@babel/runtime/helpers/esm/extends';
import { BlockMenuItem } from '@keystonejs/field-content/block-components';
import { Input } from '@arch-ui/input';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

let type = 'unsplashImage'; // TODO: Receive this value from the server somehow. 'pluralize' is a fairly
// large lib.

const path = pluralize.plural(type);
let Context = createContext(null);
let Provider = Context.Provider;
const RESULTS_PER_PAGE = 5;
const RESULTS_WIDTH = '400';

function attributeUrl(url, _ref) {
  let {
    source,
    medium
  } = _ref;
  const attributedUrl = new URL(url); // Adding source attribution to the URL for Unsplash to track usage
  // https://help.unsplash.com/articles/2511315-guideline-attribution

  if (source) {
    attributedUrl.searchParams.set('utm_source', source);

    if (medium) {
      attributedUrl.searchParams.set('utm_medium', medium);
    }
  }

  return attributedUrl;
}

const UnsplashImage = _ref2 => {
  let {
    width,
    height,
    unsplashId,
    publicUrl,
    alt,
    user,
    onClick
  } = _ref2;
  const options = useContext(Context);
  const imgUrl = attributeUrl(publicUrl, options.attribution);
  const userUrl = attributeUrl(user.url, options.attribution);
  const linkStyles = {
    color: 'white',
    textDecoration: 'underline'
  };
  return jsx("figure", {
    css: [{
      flex: 'auto',
      height: '200px',
      minWidth: '160px',
      margin: '0 4px 4px 0',
      position: 'relative',
      borderRadius: '4px',
      cursor: 'pointer',
      overflow: 'hidden'
    }, width <= height ? {
      width: '320px'
    } : {
      width: '80px'
    }],
    id: unsplashId,
    onClick: onClick
  }, jsx("img", {
    src: imgUrl,
    alt: alt,
    css: {
      width: '100%',
      height: '100%',
      objectFit: 'cover',
      verticalAlign: 'middle'
    }
  }), jsx("div", {
    css: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      backgroundImage: 'linear-gradient(180deg,rgba(0,0,0,.2) 0,transparent 40%,transparent 60%,rgba(0,0,0,.3))',
      zIndex: 1,
      opacity: 0,
      transition: 'opacity 0.2s ease-in-out',
      '&:hover': {
        opacity: 1
      }
    }
  }, jsx("p", {
    css: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      margin: 8,
      fontSize: 14,
      fonWeight: 'bold',
      color: 'white'
    }
  }, "Photo by", ' ', jsx("a", {
    css: linkStyles,
    href: userUrl,
    target: "_blank",
    rel: "noopener noreferrer"
  }, user.name), ' ')));
};

const Search = _ref3 => {
  let {
    onSelect
  } = _ref3;
  const options = useContext(Context);
  const [searchPage, setSearchPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState();
  const showPrevious = useCallback(() => {
    const newPage = Math.max(1, searchPage - 1);
    setSearchPage(newPage);
    getUnsplashImages(searchTerm, newPage);
  }, [searchPage, setSearchPage, searchTerm]);
  const showNext = useCallback(() => {
    const newPage = Math.min(searchResults && searchResults.totalPages || Infinity, searchPage + 1);
    setSearchPage(newPage);
    getUnsplashImages(searchTerm, newPage);
  }, [searchPage, setSearchPage, searchTerm]);

  const getUnsplashImages = (query, page) => {
    fetch(options.adminMeta.apiPath, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        variables: {
          query,
          page,
          perPage: RESULTS_PER_PAGE,
          width: RESULTS_WIDTH
        },
        query: "query searchImages($query: String!, $page: Int, $perPage: Int, $width: String) {\n          searchUnsplash(query: $query, perPage: $perPage, page: $page) {\n            total\n            totalPages\n            results {\n              id\n              unsplashId\n              publicUrl: publicUrlTransformed(transformation: { w: $width})\n              width\n              height\n              alt\n              user {\n                name\n                url\n              }\n            }\n          }\n        }"
      })
    }).then(x => x.json()).then(results => {
      setSearchResults(results.data.searchUnsplash);
    });
  };

  const onChange = useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    setSearchTerm(event.target.value);

    if (event.target.value.length > 3) {
      getUnsplashImages(event.target.value, 1);
    }
  }, [searchTerm, setSearchTerm]);
  const unsplashUrl = attributeUrl('https://unsplash.com', options.attribution);
  return jsx("div", {
    css: {
      backgroundColor: '#f2f3f3',
      borderRadius: '8px',
      padding: '12px',
      boxShadow: '0 1px 2px rgba(0,0,0,0.2)'
    }
  }, jsx(Input, {
    autoFocus: true,
    type: "text",
    id: "unsplash-block-search-input",
    placeholder: "Search for an image...",
    value: searchTerm,
    onChange: onChange,
    onClick: e => {
      e.stopPropagation();
    }
  }), jsx("div", null, searchResults && searchResults.results.length ? jsx(Fragment, null, jsx("div", {
    css: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'space-between',
      paddingTop: '16px',
      paddingBottom: '16px',
      width: '100%',
      fontSize: '0.85rem'
    }
  }, jsx("span", {
    css: {
      flex: 1
    }
  }, jsx("a", {
    css: {
      color: searchPage > 1 ? null : '#ccc',
      cursor: searchPage > 1 ? 'pointer' : 'default',
      textDecoration: 'none',
      '&:hover': {
        textDecoration: searchPage > 1 ? 'underline' : 'none'
      }
    },
    onClick: showPrevious
  }, "Previous")), jsx("span", {
    css: {
      flex: 6,
      textAlign: 'center',
      color: '#999'
    }
  }, searchResults.total, " results"), jsx("span", {
    css: {
      flex: 1,
      textAlign: 'right'
    }
  }, jsx("a", {
    css: {
      color: searchPage < searchResults.totalPages ? null : '#ccc',
      cursor: searchPage < searchResults.totalPages ? 'pointer' : 'default',
      textDecoration: 'none',
      '&:hover': {
        textDecoration: searchPage < searchResults.totalPages ? 'underline' : 'none'
      }
    },
    onClick: showNext
  }, "Next"))), jsx("div", {
    css: {
      margin: 0,
      padding: 0,
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-evenly',
      width: 'calc(100% + 4px)'
    }
  }, searchResults.results.map(image => jsx(UnsplashImage, _extends({
    key: image.unsplashId
  }, image, {
    unsplashUrl: unsplashUrl,
    onClick: () => onSelect(image)
  }))))) : jsx("div", {
    css: {
      padding: '32px',
      textAlign: 'center',
      fontSize: '1rem',
      color: '#cdcdcd'
    }
  }, "Start typing to search for an image on Unsplash")));
};

let Block = _ref4 => {
  let {
    unsplashData,
    onSelect
  } = _ref4;
  let options = useContext(Context);
  let unsplash = null;

  if (unsplashData) {
    const {
      publicUrl,
      alt,
      user
    } = unsplashData;
    const imgUrl = attributeUrl(publicUrl, options.attribution);
    const userUrl = attributeUrl(user.url, options.attribution);
    const unsplashUrl = attributeUrl('https://unsplash.com', options.attribution);
    const captionLinkStyle = {
      color: 'inherit',
      textDecoration: 'underline',
      '&:hover': {
        textDecoration: 'none'
      }
    };
    unsplash = jsx("div", null, jsx("div", null, jsx("img", {
      css: {
        maxWidth: '100%'
      },
      src: imgUrl,
      alt: alt
    })), jsx("div", {
      css: {
        fontSize: '0.75rem',
        marginTop: '8px',
        color: '#999'
      }
    }, "Photo by", ' ', jsx("a", {
      href: userUrl,
      target: "_blank",
      css: captionLinkStyle
    }, user.name), ' ', "on", ' ', jsx("a", {
      href: unsplashUrl,
      target: "_blank",
      css: captionLinkStyle
    }, "Unsplash")));
  }

  return jsx(Fragment, null, !unsplashData && jsx(Search, {
    onSelect: onSelect
  }), unsplash);
};

function Sidebar(_ref5) {
  let {
    editor
  } = _ref5;
  const icon = jsx("svg", {
    width: 16,
    height: 16,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 576 512"
  }, jsx("path", {
    d: "M480 416v16c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v208c0 44.112 35.888 80 80 80h336zm96-80V80c0-26.51-21.49-48-48-48H144c-26.51 0-48 21.49-48 48v256c0 26.51 21.49 48 48 48h384c26.51 0 48-21.49 48-48zM256 128c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-96 144l55.515-55.515c4.686-4.686 12.284-4.686 16.971 0L272 256l135.515-135.515c4.686-4.686 12.284-4.686 16.971 0L512 208v112H160v-48z"
  }));
  return jsx(BlockMenuItem, {
    icon: icon,
    text: "Unsplash",
    insertBlock: () => {
      editor.insertBlock({
        type
      });
    }
  });
}

function Node(_ref6) {
  let {
    node,
    editor
  } = _ref6;
  return jsx(Block, {
    unsplashData: node.data.get('unsplashData'),
    onRemove: () => {
      editor.removeNodeByKey(node.key);
    },
    onSelect: unsplashData => {
      editor.setNodeByKey(node.key, {
        data: node.data.set('unsplashData', unsplashData)
      });
    }
  });
}

let getSchema = () => ({
  isVoid: true
});

function serialize(_ref7) {
  let {
    node
  } = _ref7;
  const unsplashData = node.data.get('unsplashData');
  const joinIds = node.data.get('_joinIds');
  const mutations = joinIds && joinIds.length ? {
    connect: {
      id: joinIds[0]
    }
  } : {
    create: {
      image: unsplashData.unsplashId
    }
  };
  return {
    mutations,
    node: _objectSpread({}, node.toJSON(), {
      // Zero out the data so we don't unnecesarily duplicate the url
      data: {}
    })
  };
}

function deserialize(_ref8) {
  let {
    node,
    joins
  } = _ref8;

  if (!joins || !joins.length) {
    console.error('No unsplash data received when rehydrating unsplashImage block');
    return;
  } // Inject the original url back into the block


  return node.set('data', node.data.set('unsplashData', joins[0].image));
}

export { Node, Provider, Sidebar, deserialize, getSchema, path, serialize, type };
