import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { FieldContainer, FieldLabel, FieldDescription, FieldInput } from '@arch-ui/fields';
import React__default, { Component } from 'react';
import { Input } from '@arch-ui/input';

class TextField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      const value = event.target.value; // Similar implementation as per old Keystone version

      if (/^-?\d*\.?\d*$/.test(value)) {
        this.props.onChange(value);
      }
    });
  }

  render() {
    const {
      autoFocus,
      field,
      value,
      errors
    } = this.props;
    const htmlID = "ks-input-".concat(field.path);
    return React__default.createElement(FieldContainer, null, React__default.createElement(FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && React__default.createElement(FieldDescription, null, field.config.adminDoc), React__default.createElement(FieldInput, null, React__default.createElement(Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "text",
      value: value,
      onChange: this.onChange,
      id: htmlID
    })));
  }

}

export default TextField;
