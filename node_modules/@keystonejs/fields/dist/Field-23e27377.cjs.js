'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var button = require('@arch-ui/button');

var Popout = _interopDefault(require('@arch-ui/popout'));

var SketchPicker = _interopDefault(require('react-color/lib/Sketch'));

const ColorField = _ref => {
  let {
    field,
    value: serverValue,
    errors,
    onChange: _onChange
  } = _ref;
  const value = serverValue || '';
  const htmlID = "ks-input-".concat(field.path);
  const colorPickerValue = React.useMemo(() => {
    // keystone previously stored values as a hex string and this should still be supported
    // it is now stored as an rgba string
    if (value) {
      if (value.indexOf('rgba', 0) === 0) {
        const rgbaValues = value.replace(/^rgba\(|\s+|\)$/g, '').split(',');
        return {
          r: rgbaValues[0],
          g: rgbaValues[1],
          b: rgbaValues[2],
          a: rgbaValues[3]
        };
      }

      return value;
    }

    return '';
  }, [value]);

  const target = props => core.jsx(button.Button, _extends({}, props, {
    variant: "ghost"
  }), value ? core.jsx(React.Fragment, null, core.jsx("div", {
    style: {
      // using inline styles instead of emotion for setting the color
      // since emotion doesn't escape styles so it could be used for CSS injection
      // this is also better in terms of memory since the value can change a lot
      // and emotion caches everything
      backgroundColor: value
    },
    css: {
      borderRadius: 3,
      display: 'inline-block',
      height: 18,
      width: 18,
      marginRight: 10,
      verticalAlign: 'middle'
    }
  }), core.jsx("span", {
    css: {
      verticalAlign: 'middle'
    }
  }, value)) : 'Set Color');

  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(fields.FieldInput, null, core.jsx(Popout, {
    width: 220,
    target: target
  }, core.jsx(SketchPicker, {
    css: {
      // using !important because react-color uses inline styles and applies a box shadow
      // but Popout already applies a box shadow
      boxShadow: 'none !important'
    },
    presetColors: [],
    color: colorPickerValue,
    onChange: _ref2 => {
      let {
        rgb: {
          r,
          g,
          b,
          a
        }
      } = _ref2;

      _onChange("rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")"));
    }
  }))));
};

exports.default = ColorField;
