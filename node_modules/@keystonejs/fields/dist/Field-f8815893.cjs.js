'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var input = require('@arch-ui/input');

class TextField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      const value = event.target.value;
      this.props.onChange(value.replace(/\D/g, ''));
    });

    _defineProperty(this, "valueToString", value => {
      // Make the value a string to keep react happy.
      if (typeof value === 'string') {
        return value;
      } else if (typeof value === 'number') {
        return String(value);
      } else {
        // If it is neither string nor number then it must be empty.
        return '';
      }
    });
  }

  render() {
    const {
      autoFocus,
      field,
      value,
      errors
    } = this.props;
    const htmlID = "ks-input-".concat(field.path);
    return React__default.createElement(fields.FieldContainer, null, React__default.createElement(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && React__default.createElement(fields.FieldDescription, null, field.config.adminDoc), React__default.createElement(fields.FieldInput, null, React__default.createElement(input.Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "text",
      value: this.valueToString(value),
      onChange: this.onChange,
      id: htmlID
    })));
  }

}

exports.default = TextField;
