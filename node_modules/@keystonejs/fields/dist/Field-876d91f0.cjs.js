'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var Select = _interopDefault(require('@arch-ui/select'));

class SelectField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", option => {
      this.props.onChange(option ? option.value : null);
    });
  }

  render() {
    const {
      autoFocus,
      field,
      value: serverValue,
      renderContext,
      errors
    } = this.props;
    const value = field.options.find(i => i.value === serverValue);
    const htmlID = "ks-input-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    const selectProps = renderContext === 'dialog' ? {
      menuPortalTarget: document.body,
      menuShouldBlockScroll: true
    } : null;
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(fields.FieldInput, null, core.jsx("div", {
      css: {
        flex: 1
      }
    }, core.jsx(Select, _extends({
      autoFocus: autoFocus,
      value: canRead ? value : undefined,
      placeholder: canRead ? undefined : error.message,
      options: field.options,
      onChange: this.onChange,
      isClearable: true,
      id: "react-select-".concat(htmlID),
      inputId: htmlID,
      instanceId: htmlID
    }, selectProps)))));
  }

}

exports.default = SelectField;
