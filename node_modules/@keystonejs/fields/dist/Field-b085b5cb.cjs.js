'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var React = require('react');

var React__default = _interopDefault(React);

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var theme = require('@arch-ui/theme');

var input = require('@arch-ui/input');

var preview = require('./preview-0c33e771.cjs.js');

const StyledPreview = _ref => {
  let {
    preview: preview$1,
    originalUrl,
    fieldPath
  } = _ref,
      props = _objectWithoutProperties(_ref, ["preview", "originalUrl", "fieldPath"]);

  return core.jsx(preview.Preview, _extends({
    data: preview$1,
    originalUrl: originalUrl,
    fieldPath: fieldPath,
    css: {
      backgroundColor: 'white',
      borderRadius: theme.borderRadius,
      border: "1px solid ".concat(theme.colors.N20),
      marginTop: theme.gridSize,
      padding: 4,
      width: 410,
      // 300px image + chrome
      boxSizing: 'border-box'
    }
  }, props));
};

const PlaceholderPreview = _ref2 => {
  let {
    originalUrl,
    fieldPath
  } = _ref2;
  return core.jsx(StyledPreview, {
    data: {
      html: '<div style="background-color: darkgray; height: 2.5em" />',
      title: 'Preview will be generated after save'
    },
    originalUrl: originalUrl,
    fieldPath: fieldPath,
    css: {
      opacity: 0.3
    }
  });
};

class OEmbedField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange({
        originalUrl: event.target.value
      });
    });
  }

  render() {
    const {
      autoFocus,
      field,
      value = null,
      savedValue = null,
      errors
    } = this.props;
    const htmlID = "ks-oembed-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    const hasChanged = field.hasChanged({
      [field.path]: savedValue
    }, {
      [field.path]: value
    });
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), field.config.adminDoc && core.jsx(fields.FieldDescription, null, field.config.adminDoc), core.jsx(fields.FieldInput, null, core.jsx(input.Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "url",
      value: canRead && value && value.originalUrl || '',
      placeholder: canRead ? undefined : error.message,
      onChange: this.onChange,
      id: htmlID
    })), value && value.originalUrl && hasChanged && core.jsx(PlaceholderPreview, {
      originalUrl: value.originalUrl,
      fieldPath: field.path
    }), value && value.originalUrl && !hasChanged && core.jsx(StyledPreview, {
      preview: value.preview,
      originalUrl: value.originalUrl,
      fieldPath: field.path
    }));
  }

}

exports.default = OEmbedField;
