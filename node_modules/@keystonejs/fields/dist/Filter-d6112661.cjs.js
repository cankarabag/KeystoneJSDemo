'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var luxon = require('luxon');

var dateFns = require('date-fns');

var dayPicker = require('@arch-ui/day-picker');

var React = require('react');

var React__default = _interopDefault(React);

function parseDate(value) {
  // why do we use luxon instead of date-fns/native Dates?
  // native Dates don't allow you to set custom timezones
  // yes, you can parse other timezones but they're converted
  // to the local time zone
  const dt = luxon.DateTime.fromISO(value, {
    setZone: true
  });
  return {
    date: dt.toFormat('yyyy-LL-dd'),
    time: dt.toFormat('HH:mm:ss.SSS'),
    offset: dt.toFormat('ZZ')
  };
}

function stringifyDate(date) {
  return "".concat(date.date, "T").concat(date.time).concat(date.offset);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const CalendarDayFilterView = props => {
  const parsedDate = props.value ? parseDate(props.value) : parseDate(new Date().toISOString());

  let handleDayChange = day => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      date: dateFns.format(day, 'YYYY-MM-DD')
    })));
  };

  let handleTimeChange = event => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      time: event.target.value
    })));
  };

  let handleOffsetChange = offset => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      offset
    })));
  };

  if (!props.filter) return null;
  const {
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  } = props.field.config;
  return React__default.createElement(dayPicker.DayTimePicker, _objectSpread({}, parsedDate, {
    htmlID: 'calendar-day-filter',
    handleDayChange,
    handleTimeChange,
    handleOffsetChange,
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  }));
};

exports.default = CalendarDayFilterView;
