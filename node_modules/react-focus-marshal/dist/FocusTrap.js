'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndependentFocusTrap = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _focusTrap = require('focus-trap');

var _focusTrap2 = _interopRequireDefault(_focusTrap);

var _reactNodeResolver = require('react-node-resolver');

var _reactNodeResolver2 = _interopRequireDefault(_reactNodeResolver);

var _FocusMarshal = require('./FocusMarshal');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IndependentFocusTrap = exports.IndependentFocusTrap = function (_Component) {
  _inherits(IndependentFocusTrap, _Component);

  function IndependentFocusTrap() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IndependentFocusTrap);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IndependentFocusTrap.__proto__ || Object.getPrototypeOf(IndependentFocusTrap)).call.apply(_ref, [this].concat(args))), _this), _this.getBoundary = function (ref) {
      _this.boundary = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IndependentFocusTrap, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      // this must be captured before mount, as the trap will alter the `activeElement`
      if (document && document.activeElement) {
        this.previouslyFocusedElement = document.activeElement;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          FocusMarshal = _props.FocusMarshal,
          options = _props.options;

      // update the focus manager state

      if (FocusMarshal) FocusMarshal.add(this);

      // Objects as defaultProps don't merge, set and spread here instead
      var defaultOptions = {
        fallbackFocus: this.boundary,
        returnFocusOnDeactivate: true
      };

      this.mergedOptions = _extends({}, defaultOptions, options);
      this.trap = (0, _focusTrap2.default)(this.boundary, this.mergedOptions);

      // if the trap isn't inside
      if (!FocusMarshal) {
        this.trap.activate();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var FocusMarshal = this.props.FocusMarshal;

      // update the focus manager state

      if (FocusMarshal) {
        FocusMarshal.remove(this);
      }

      // deactivate this trap
      this.trap.deactivate();

      if (this.mergedOptions.returnFocusOnDeactivate && this.previouslyFocusedElement && this.previouslyFocusedElement.focus) {
        this.previouslyFocusedElement.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNodeResolver2.default,
        { innerRef: this.getBoundary },
        this.props.children
      );
    }
  }]);

  return IndependentFocusTrap;
}(_react.Component);

IndependentFocusTrap.defaultProps = {
  options: {}
};
exports.default = (0, _FocusMarshal.withFocusMarshal)(IndependentFocusTrap);