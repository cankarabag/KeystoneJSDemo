import { SetComplement } from '.';
export declare type $Keys<T extends object> = (keyof T);
export declare type $Values<T extends object> = (T[keyof T]);
export declare type $ReadOnly<T extends object> = (Readonly<T>);
export declare type $Diff<T extends U, U extends object> = (Pick<T, SetComplement<keyof T, keyof U>>);
export declare type $PropertyType<T extends object, K extends keyof T> = (T[K]);
export declare type $ElementType<T extends {
    [P in K & any]: any;
}, K extends keyof T | number> = (T[K]);
