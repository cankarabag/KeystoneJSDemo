export declare type SetDifference<A extends string, B extends string> = ({
    [P in A]: P;
} & {
    [P in B]: never;
} & {
    [k: string]: never;
})[A];
export declare type SetComplement<A extends string, A2 extends A> = SetDifference<A, A2>;
export declare type SymmetricDifference<A extends string, B extends string> = SetDifference<A | B, A & B>;
export declare type Omit<T extends object, K extends keyof T> = (Pick<T, SetComplement<keyof T, K>>);
export declare type Diff<T extends object, U extends object> = (Pick<T, SetDifference<keyof T, keyof U>>);
export declare type Subtract<T extends U, U extends object> = (Pick<T, SetComplement<keyof T, keyof U>>);
export declare type Overwrite<T extends object, U extends object, N = Diff<T, U> & Omit<U, SetDifference<keyof U, keyof T>>> = (Pick<N, keyof N>);
export declare type Assign<T extends object, U extends object, N = (Diff<T, U> & U) & Omit<U, SetDifference<keyof U, keyof T>>> = Pick<N, keyof N>;
