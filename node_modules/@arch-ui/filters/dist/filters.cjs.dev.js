'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var core = require('@emotion/core');
var react = require('react');
var reactRadios = require('react-radios');
var theme = require('@arch-ui/theme');
var controls = require('@arch-ui/controls');
var layout = require('@arch-ui/layout');

const ControlLabel = (_ref) => {
  let props = _objectWithoutProperties(_ref, ["isChecked", "isDisabled"]);

  const type = react.Children.toArray(props.children)[0].props.type;
  const borderRadius = type === 'checkbox' ? 3 : '2em';
  return core.jsx("label", _extends({
    css: {
      alignItems: 'center',
      border: "1px solid ".concat(theme.colors.N10),
      borderRadius,
      display: 'flex',
      fontSize: '0.75em',
      fontWeight: 500,
      lineHeight: 1,
      transition: 'border-color 150ms linear',
      width: '100%',
      userSelect: 'none',
      ':hover, :focus': {
        borderColor: theme.colors.N20
      },
      ':active': {
        backgroundColor: theme.colors.N05
      }
    }
  }, props));
};

const StretchGroup = props => core.jsx(layout.FlexGroup, _extends({
  stretch: true
}, props)); // checkbox


const CheckboxGroup = props => core.jsx(reactRadios.CheckboxGroup, _extends({
  component: StretchGroup
}, props));

const ButtonCheckbox = props => core.jsx(controls.CheckboxPrimitive, _extends({
  components: {
    Label: ControlLabel
  }
}, props));

const Checkbox = props => core.jsx(reactRadios.Checkbox, _extends({
  component: ButtonCheckbox
}, props)); // radio

const RadioGroup = props => core.jsx(reactRadios.RadioGroup, _extends({
  component: StretchGroup
}, props));

const ButtonRadio = props => core.jsx(controls.RadioPrimitive, _extends({
  components: {
    Label: ControlLabel
  }
}, props));

const Radio = props => core.jsx(reactRadios.Radio, _extends({
  component: ButtonRadio
}, props));

exports.Checkbox = Checkbox;
exports.CheckboxGroup = CheckboxGroup;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
