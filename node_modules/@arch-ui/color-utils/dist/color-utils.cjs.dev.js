'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
}); // Validate Hex
// ==============================

function validateHex(color) {
  var hex = color.replace('#', '');

  if (hex.length === 3) {
    return hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }

  if (hex.length !== 6) {
    throw new Error("Invalid color value provided: \"".concat(color, "\""));
  }

  return hex;
} // Hex to RGB Obj
// ==============================


function hexToRgb(hex) {
  var r = parseInt(hex.substring(0, 2), 16);
  var g = parseInt(hex.substring(2, 4), 16);
  var b = parseInt(hex.substring(4, 6), 16);
  return {
    r: r,
    g: g,
    b: b
  };
} // String to RGB
// ==============================


function stringToRGB(color) {
  var tuple = color.substring(4, color.length - 1).replace(/ /g, '').split(',');
  var r = parseInt(tuple[0], 10);
  var g = parseInt(tuple[1], 10);
  var b = parseInt(tuple[2], 10);
  return {
    r: r,
    g: g,
    b: b
  };
} // Hex or RGB string to RGB Obj
// ==============================


function anyToRGB(color) {
  var isRgbString = color.length > 7;

  if (isRgbString) {
    return stringToRGB(color);
  } else {
    var hex = validateHex(color);
    return hexToRgb(hex);
  }
} // To RGB string
// ==============================


function toRgbString(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  return a ? "rgba(".concat([r, g, b, a].join(','), ")") : "rgb(".concat([r, g, b].join(','), ")");
} // RGB with alpha channel
// ==============================


function alpha(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var _anyToRGB = anyToRGB(color),
      r = _anyToRGB.r,
      g = _anyToRGB.g,
      b = _anyToRGB.b;

  return toRgbString({
    r: r,
    g: g,
    b: b,
    a: opacity
  });
} // Shade Color
// ==============================


var shader = function shader(c, t, p) {
  return Math.round((t - c) * p) + c;
};

function shade(color, percent) {
  var df = percent / 100; // decimal fraction

  var _anyToRGB2 = anyToRGB(color),
      r = _anyToRGB2.r,
      g = _anyToRGB2.g,
      b = _anyToRGB2.b;

  var t = df < 0 ? 0 : 255;
  var p = Math.abs(df);
  return toRgbString({
    r: shader(r, t, p),
    g: shader(g, t, p),
    b: shader(b, t, p)
  });
} // shade aliases


var lighten = shade;

function darken(color, percent) {
  return shade(color, percent * -1);
} // Mix Colors
// ==============================


var mixer = function mixer(c1, c2, df) {
  return Math.round((c2 - c1) * df) + c1;
};

function mix(color1, color2, percent) {
  var df = percent / 100; // decimal fraction

  var _anyToRGB3 = anyToRGB(color1),
      r1 = _anyToRGB3.r,
      g1 = _anyToRGB3.g,
      b1 = _anyToRGB3.b;

  var _anyToRGB4 = anyToRGB(color2),
      r2 = _anyToRGB4.r,
      g2 = _anyToRGB4.g,
      b2 = _anyToRGB4.b;

  return toRgbString({
    r: mixer(r1, r2, df),
    g: mixer(g1, g2, df),
    b: mixer(b1, b2, df)
  });
}

exports.alpha = alpha;
exports.darken = darken;
exports.lighten = lighten;
exports.mix = mix;
