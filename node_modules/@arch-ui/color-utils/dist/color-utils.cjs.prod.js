"use strict";
function validateHex(color) {
  var hex = color.replace("#", "");
  if (3 === hex.length)
    return hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  if (6 !== hex.length)
    throw new Error('Invalid color value provided: "'.concat(color, '"'));
  return hex;
}
function hexToRgb(hex) {
  return {
    r: parseInt(hex.substring(0, 2), 16),
    g: parseInt(hex.substring(2, 4), 16),
    b: parseInt(hex.substring(4, 6), 16)
  };
}
function stringToRGB(color) {
  var tuple = color
    .substring(4, color.length - 1)
    .replace(/ /g, "")
    .split(",");
  return {
    r: parseInt(tuple[0], 10),
    g: parseInt(tuple[1], 10),
    b: parseInt(tuple[2], 10)
  };
}
function anyToRGB(color) {
  return color.length > 7 ? stringToRGB(color) : hexToRgb(validateHex(color));
}
function toRgbString(_ref) {
  var r = _ref.r,
    g = _ref.g,
    b = _ref.b,
    a = _ref.a;
  return a
    ? "rgba(".concat([r, g, b, a].join(","), ")")
    : "rgb(".concat([r, g, b].join(","), ")");
}
function alpha(color) {
  var opacity =
      arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
    _anyToRGB = anyToRGB(color);
  return toRgbString({
    r: _anyToRGB.r,
    g: _anyToRGB.g,
    b: _anyToRGB.b,
    a: opacity
  });
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var shader = function(c, t, p) {
  return Math.round((t - c) * p) + c;
};
function shade(color, percent) {
  var df = percent / 100,
    _anyToRGB2 = anyToRGB(color),
    r = _anyToRGB2.r,
    g = _anyToRGB2.g,
    b = _anyToRGB2.b,
    t = df < 0 ? 0 : 255,
    p = Math.abs(df);
  return toRgbString({
    r: shader(r, t, p),
    g: shader(g, t, p),
    b: shader(b, t, p)
  });
}
var lighten = shade;
function darken(color, percent) {
  return shade(color, -1 * percent);
}
var mixer = function(c1, c2, df) {
  return Math.round((c2 - c1) * df) + c1;
};
function mix(color1, color2, percent) {
  var df = percent / 100,
    _anyToRGB3 = anyToRGB(color1),
    r1 = _anyToRGB3.r,
    g1 = _anyToRGB3.g,
    b1 = _anyToRGB3.b,
    _anyToRGB4 = anyToRGB(color2),
    r2 = _anyToRGB4.r,
    g2 = _anyToRGB4.g,
    b2 = _anyToRGB4.b;
  return toRgbString({
    r: mixer(r1, r2, df),
    g: mixer(g1, g2, df),
    b: mixer(b1, b2, df)
  });
}
(exports.alpha = alpha),
  (exports.darken = darken),
  (exports.lighten = lighten),
  (exports.mix = mix);
