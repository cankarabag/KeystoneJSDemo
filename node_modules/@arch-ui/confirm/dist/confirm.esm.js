import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { forwardRef, PureComponent, Fragment } from 'react';
import { createPortal } from 'react-dom';
import ScrollLock from 'react-scrolllock';
import { jsx } from '@emotion/core';
import styled from '@emotion/styled';
import { borderRadius, shadows } from '@arch-ui/theme';
import { FocusTrap } from 'react-focus-marshal';
import { withTransitionState, Blanket, fade, zoomInDown } from '@arch-ui/modal-utils';

const innerGutter = 15; // Styled Components
// ------------------------------

const Positioner = styled.div({
  display: 'flex',
  justifyContent: 'center',
  left: 0,
  position: 'fixed',
  top: 0,
  width: '100%',
  zIndex: 2
});
const Dialog = forwardRef((_ref, ref) => {
  let {
    component: Tag,
    width
  } = _ref,
      props = _objectWithoutProperties(_ref, ["component", "width"]);

  return jsx(Tag, _extends({
    ref: ref,
    role: "alertdialog",
    css: {
      backgroundColor: 'white',
      borderBottomRightRadius: borderRadius * 2,
      borderBottomLeftRadius: borderRadius * 2,
      boxShadow: shadows[2],
      display: 'flex',
      flexDirection: 'column',
      maxHeight: '100%',
      maxWidth: '96%',
      width: width
    }
  }, props));
}); // Content

const Body = styled.div({
  lineHeight: 1.4,
  padding: innerGutter
});

class ModalConfirm extends PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onKeyDown", e => {
      if (this.props.onKeyDown) this.props.onKeyDown(e);
    });
  }

  componentDidMount() {
    document.addEventListener('keydown', this.onKeyDown, false);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.onKeyDown, false);
  }

  render() {
    const {
      attachTo,
      children,
      component,
      width,
      transitionState
    } = this.props;

    if (!attachTo) {
      return null;
    }

    return createPortal(jsx(Fragment, null, jsx(Blanket, {
      style: fade(transitionState),
      isTinted: true,
      isLight: true
    }), jsx(Positioner, {
      style: zoomInDown(transitionState)
    }, jsx(FocusTrap, null, jsx(Dialog, {
      component: component,
      width: width
    }, jsx(Body, null, children))), jsx(ScrollLock, null))), attachTo);
  }

}

_defineProperty(ModalConfirm, "defaultProps", {
  attachTo: typeof document !== 'undefined' ? document.body : null,
  component: 'div',
  width: 400
});

var index = withTransitionState(ModalConfirm);

export default index;
