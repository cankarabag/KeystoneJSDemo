"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), react = require("react"), reactDom = require("react-dom"), ScrollLock = _interopDefault(require("react-scrolllock")), core = require("@emotion/core"), styled = _interopDefault(require("@emotion/styled")), theme = require("@arch-ui/theme"), reactFocusMarshal = require("react-focus-marshal"), modalUtils = require("@arch-ui/modal-utils");

const innerGutter = 15, Positioner = styled.div({
  display: "flex",
  justifyContent: "center",
  left: 0,
  position: "fixed",
  top: 0,
  width: "100%",
  zIndex: 2
}), Dialog = react.forwardRef((_ref, ref) => {
  let {component: Tag, width: width} = _ref, props = _objectWithoutProperties(_ref, [ "component", "width" ]);
  return core.jsx(Tag, _extends({
    ref: ref,
    role: "alertdialog",
    css: {
      backgroundColor: "white",
      borderBottomRightRadius: 2 * theme.borderRadius,
      borderBottomLeftRadius: 2 * theme.borderRadius,
      boxShadow: theme.shadows[2],
      display: "flex",
      flexDirection: "column",
      maxHeight: "100%",
      maxWidth: "96%",
      width: width
    }
  }, props));
}), Body = styled.div({
  lineHeight: 1.4,
  padding: 15
});

class ModalConfirm extends react.PureComponent {
  constructor() {
    super(...arguments), _defineProperty(this, "onKeyDown", e => {
      this.props.onKeyDown && this.props.onKeyDown(e);
    });
  }
  componentDidMount() {
    document.addEventListener("keydown", this.onKeyDown, !1);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeyDown, !1);
  }
  render() {
    const {attachTo: attachTo, children: children, component: component, width: width, transitionState: transitionState} = this.props;
    return attachTo ? reactDom.createPortal(core.jsx(react.Fragment, null, core.jsx(modalUtils.Blanket, {
      style: modalUtils.fade(transitionState),
      isTinted: !0,
      isLight: !0
    }), core.jsx(Positioner, {
      style: modalUtils.zoomInDown(transitionState)
    }, core.jsx(reactFocusMarshal.FocusTrap, null, core.jsx(Dialog, {
      component: component,
      width: width
    }, core.jsx(Body, null, children))), core.jsx(ScrollLock, null))), attachTo) : null;
  }
}

_defineProperty(ModalConfirm, "defaultProps", {
  attachTo: "undefined" != typeof document ? document.body : null,
  component: "div",
  width: 400
});

var index = modalUtils.withTransitionState(ModalConfirm);

exports.default = index;
