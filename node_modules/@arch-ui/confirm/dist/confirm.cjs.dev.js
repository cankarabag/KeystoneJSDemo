'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var react = require('react');
var reactDom = require('react-dom');
var ScrollLock = _interopDefault(require('react-scrolllock'));
var core = require('@emotion/core');
var styled = _interopDefault(require('@emotion/styled'));
var theme = require('@arch-ui/theme');
var reactFocusMarshal = require('react-focus-marshal');
var modalUtils = require('@arch-ui/modal-utils');

const innerGutter = 15; // Styled Components
// ------------------------------

const Positioner = styled.div({
  display: 'flex',
  justifyContent: 'center',
  left: 0,
  position: 'fixed',
  top: 0,
  width: '100%',
  zIndex: 2
});
const Dialog = react.forwardRef((_ref, ref) => {
  let {
    component: Tag,
    width
  } = _ref,
      props = _objectWithoutProperties(_ref, ["component", "width"]);

  return core.jsx(Tag, _extends({
    ref: ref,
    role: "alertdialog",
    css: {
      backgroundColor: 'white',
      borderBottomRightRadius: theme.borderRadius * 2,
      borderBottomLeftRadius: theme.borderRadius * 2,
      boxShadow: theme.shadows[2],
      display: 'flex',
      flexDirection: 'column',
      maxHeight: '100%',
      maxWidth: '96%',
      width: width
    }
  }, props));
}); // Content

const Body = styled.div({
  lineHeight: 1.4,
  padding: innerGutter
});

class ModalConfirm extends react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onKeyDown", e => {
      if (this.props.onKeyDown) this.props.onKeyDown(e);
    });
  }

  componentDidMount() {
    document.addEventListener('keydown', this.onKeyDown, false);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.onKeyDown, false);
  }

  render() {
    const {
      attachTo,
      children,
      component,
      width,
      transitionState
    } = this.props;

    if (!attachTo) {
      return null;
    }

    return reactDom.createPortal(core.jsx(react.Fragment, null, core.jsx(modalUtils.Blanket, {
      style: modalUtils.fade(transitionState),
      isTinted: true,
      isLight: true
    }), core.jsx(Positioner, {
      style: modalUtils.zoomInDown(transitionState)
    }, core.jsx(reactFocusMarshal.FocusTrap, null, core.jsx(Dialog, {
      component: component,
      width: width
    }, core.jsx(Body, null, children))), core.jsx(ScrollLock, null))), attachTo);
  }

}

_defineProperty(ModalConfirm, "defaultProps", {
  attachTo: typeof document !== 'undefined' ? document.body : null,
  component: 'div',
  width: 400
});

var index = modalUtils.withTransitionState(ModalConfirm);

exports.default = index;
