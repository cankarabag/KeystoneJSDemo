import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import styled from '@emotion/styled';
import { colors, gridSize } from '@arch-ui/theme';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const truncate = {
  minWidth: 0,
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};
const SubtleText = styled.span({
  color: colors.N60
});
const H1 = styled.h1({
  fontSize: 28,
  fontWeight: 300,
  margin: '24px 0'
});
const PageTitle = styled.h1({
  fontSize: '2.4rem',
  fontWeight: 900,
  marginBottom: '0.5em',
  marginTop: '1.0rem'
});
const Truncate = (_ref) => {
  let {
    as: Tag
  } = _ref,
      props = _objectWithoutProperties(_ref, ["as"]);

  return jsx(Tag, _extends({
    css: truncate
  }, props));
};
Truncate.defaultProps = {
  as: 'div'
};
const Title = (_ref2) => {
  let {
    as: Tag,
    crop,
    margin
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["as", "crop", "margin"]);

  const gutter = gridSize * 3;
  const margins = {
    none: {
      margin: 0
    },
    both: {
      marginBottom: gutter,
      marginTop: gutter
    },
    bottom: {
      marginBottom: gutter,
      marginTop: 0
    },
    top: {
      marginBottom: 0,
      marginTop: gutter
    }
  };
  const offset = margins[margin];
  const cropStyles = crop ? truncate : null;
  return jsx(Tag, _extends({
    css: _objectSpread({
      fontSize: 18,
      fontWeight: 600,
      whiteSpace: 'nowrap'
    }, cropStyles, {}, offset)
  }, props));
};
Title.defaultProps = {
  as: 'h3',
  crop: false,
  margin: 'none'
};
const Kbd = styled.kbd({
  backgroundColor: colors.N05,
  border: "1px solid ".concat(colors.N20),
  borderRadius: 3,
  boxShadow: '0 1px 1px rgba(0, 0, 0, 0.12), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset',
  display: 'inline-block',
  fontFamily: 'Monaco, monospace',
  fontSize: '0.85em',
  fontWeight: 'bold',
  lineHeight: 'inherit',
  padding: '1px 5px',
  position: 'relative',
  top: '-1px',
  verticalAlign: 'middle',
  whiteSpace: 'nowrap'
});
const A11yText = (_ref3) => {
  let {
    tag: Tag
  } = _ref3,
      props = _objectWithoutProperties(_ref3, ["tag"]);

  return jsx(Tag, _extends({
    css: {
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }
  }, props));
};
A11yText.defaultProps = {
  tag: 'span'
};

export { A11yText, H1, Kbd, PageTitle, SubtleText, Title, Truncate };
