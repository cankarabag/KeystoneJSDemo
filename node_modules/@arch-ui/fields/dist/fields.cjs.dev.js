'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var core = require('@emotion/core');
var theme = require('@arch-ui/theme');
var icons = require('@arch-ui/icons');
var lozenge = require('@arch-ui/lozenge');

const FieldContainer = props => core.jsx("div", _extends({
  "data-selector": "field-container",
  css: {
    marginBottom: theme.gridSize * 2
  }
}, props));
const FieldLabel = props => {
  const accessError = (props.errors || []).find(error => error instanceof Error && error.name === 'AccessDeniedError');
  return core.jsx("label", {
    css: {
      color: theme.colors.N60,
      fontSize: '0.9rem',
      fontWeight: 500,
      paddingBottom: theme.gridSize,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    htmlFor: props.htmlFor
  }, props.field.label, ' ', accessError ? core.jsx(icons.ShieldIcon, {
    title: accessError.message,
    css: {
      color: theme.colors.N20,
      marginRight: '1em'
    }
  }) : null, ' ', props.field.config.isRequired ? core.jsx(lozenge.Lozenge, {
    appearance: "primary"
  }, " Required ") : null);
};
const FieldDescription = props => core.jsx("p", _extends({
  css: {
    margin: '0 0 8px',
    color: theme.colors.N60,
    fontSize: '0.9rem'
  }
}, props));
const FieldInput = props => core.jsx("div", _extends({
  css: {
    display: 'flex'
  }
}, props));
const Currency = props => core.jsx("span", _extends({
  css: {
    alignContent: 'center',
    backgroundColor: theme.colors.N10,
    border: '1px solid transparent',
    borderBottomRightRadius: 0,
    borderColor: theme.colors.N20,
    borderRadius: 4,
    borderRight: 0,
    borderTopRightRadius: 0,
    display: 'flex',
    fontSize: '0.9rem',
    marginRight: -2,
    padding: 10
  }
}, props));

exports.Currency = Currency;
exports.FieldContainer = FieldContainer;
exports.FieldDescription = FieldDescription;
exports.FieldInput = FieldInput;
exports.FieldLabel = FieldLabel;
