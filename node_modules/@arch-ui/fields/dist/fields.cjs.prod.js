"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), core = require("@emotion/core"), theme = require("@arch-ui/theme"), icons = require("@arch-ui/icons"), lozenge = require("@arch-ui/lozenge");

const FieldContainer = props => core.jsx("div", _extends({
  "data-selector": "field-container",
  css: {
    marginBottom: 2 * theme.gridSize
  }
}, props)), FieldLabel = props => {
  const accessError = (props.errors || []).find(error => error instanceof Error && "AccessDeniedError" === error.name);
  return core.jsx("label", {
    css: {
      color: theme.colors.N60,
      fontSize: "0.9rem",
      fontWeight: 500,
      paddingBottom: theme.gridSize,
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between"
    },
    htmlFor: props.htmlFor
  }, props.field.label, " ", accessError ? core.jsx(icons.ShieldIcon, {
    title: accessError.message,
    css: {
      color: theme.colors.N20,
      marginRight: "1em"
    }
  }) : null, " ", props.field.config.isRequired ? core.jsx(lozenge.Lozenge, {
    appearance: "primary"
  }, " Required ") : null);
}, FieldDescription = props => core.jsx("p", _extends({
  css: {
    margin: "0 0 8px",
    color: theme.colors.N60,
    fontSize: "0.9rem"
  }
}, props)), FieldInput = props => core.jsx("div", _extends({
  css: {
    display: "flex"
  }
}, props)), Currency = props => core.jsx("span", _extends({
  css: {
    alignContent: "center",
    backgroundColor: theme.colors.N10,
    border: "1px solid transparent",
    borderBottomRightRadius: 0,
    borderColor: theme.colors.N20,
    borderRadius: 4,
    borderRight: 0,
    borderTopRightRadius: 0,
    display: "flex",
    fontSize: "0.9rem",
    marginRight: -2,
    padding: 10
  }
}, props));

exports.Currency = Currency, exports.FieldContainer = FieldContainer, exports.FieldDescription = FieldDescription, 
exports.FieldInput = FieldInput, exports.FieldLabel = FieldLabel;
