"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _taggedTemplateLiteral = _interopDefault(require("@babel/runtime/helpers/taggedTemplateLiteral")), React = _interopDefault(require("react")), styled = _interopDefault(require("@emotion/styled")), core = require("@emotion/core"), theme = require("@arch-ui/theme"), typography = require("@arch-ui/typography");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral([ "to { transform: rotate(1turn); }" ]);
  return _templateObject2 = function() {
    return data;
  }, data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral([ "0%, 80%, 100% { opacity: 0; } 40% { opacity: 1; }" ]);
  return _templateObject = function() {
    return data;
  }, data;
}

const fadeAnim = core.keyframes(_templateObject()), appearanceColor = {
  default: theme.colors.N20,
  dark: theme.colors.text,
  primary: theme.colors.primary,
  inverted: "white"
}, DotsContainer = styled.div(_ref => {
  let {size: size} = _ref;
  return {
    alignSelf: "center",
    fontSize: size,
    lineHeight: 1,
    textAlign: "center",
    verticalAlign: "middle",
    display: "inline-flex"
  };
}), Dot = styled.span(_ref2 => {
  let {appearance: appearance, delay: delay = 0, isOffset: isOffset} = _ref2;
  return {
    animation: "".concat(fadeAnim, " 1s infinite ").concat(delay, "ms"),
    animationTimingFunction: "ease-in-out",
    backgroundColor: appearanceColor[appearance],
    borderRadius: "1em",
    display: "inline-block",
    height: "1em",
    marginLeft: isOffset ? "1em" : null,
    verticalAlign: "top",
    width: "1em"
  };
}), LoadingIndicator = _ref3 => {
  let {appearance: appearance, size: size} = _ref3;
  return React.createElement(DotsContainer, {
    size: size
  }, React.createElement(Dot, {
    appearance: appearance
  }), React.createElement(Dot, {
    appearance: appearance,
    delay: 160,
    isOffset: !0
  }), React.createElement(Dot, {
    appearance: appearance,
    delay: 320,
    isOffset: !0
  }), React.createElement(typography.A11yText, null, "Loading"));
};

LoadingIndicator.defaultProps = {
  appearance: "default",
  size: 4
};

const spinAnim = core.keyframes(_templateObject2()), spinnerCommon = _ref4 => {
  let {size: size} = _ref4;
  return {
    borderRadius: "50%",
    borderStyle: "solid",
    borderWidth: size / 8,
    boxSizing: "border-box",
    height: size,
    width: size
  };
}, SpinnerWrapper = styled.div(_ref5 => {
  let {size: size} = _ref5;
  return {
    height: size,
    width: size,
    position: "relative"
  };
}), SpinnerOrbit = styled.div(_ref6 => {
  let {color: color, size: size} = _ref6;
  return _objectSpread({}, spinnerCommon({
    size: size
  }), {
    borderColor: color,
    opacity: .2,
    position: "relative"
  });
}), SpinnerSatellite = styled.div(_ref7 => {
  let {color: color, size: size} = _ref7;
  return _objectSpread({}, spinnerCommon({
    size: size
  }), {
    animation: "".concat(spinAnim, " 1s linear infinite"),
    borderColor: "".concat(color, " transparent transparent"),
    left: 0,
    position: "absolute",
    top: 0
  });
}), LoadingSpinner = _ref8 => {
  let {appearance: appearance, size: size} = _ref8;
  const color = appearanceColor[appearance];
  return React.createElement(SpinnerWrapper, null, React.createElement(SpinnerOrbit, {
    color: color,
    size: size
  }), React.createElement(SpinnerSatellite, {
    color: color,
    size: size
  }), React.createElement(typography.A11yText, null, "Loading"));
};

LoadingSpinner.defaultProps = {
  appearance: "default",
  size: 16
}, exports.LoadingIndicator = LoadingIndicator, exports.LoadingSpinner = LoadingSpinner;
