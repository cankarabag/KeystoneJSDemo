'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('@emotion/styled'));
var theme = require('@arch-ui/theme');

const boldBackgroundColor = {
  default: theme.colors.N60,
  inverted: theme.colors.text,
  primary: theme.colors.primary,
  created: theme.colors.create,
  warning: theme.colors.warning,
  danger: theme.colors.danger
};
const boldTextColor = {
  default: 'white',
  inverted: 'white',
  primary: 'white',
  created: 'white',
  warning: 'white',
  danger: 'white'
};
const subtleBackgroundColor = {
  default: theme.colors.N10,
  inverted: 'white',
  primary: theme.colors.B.L85,
  created: theme.colors.G.L85,
  warning: theme.colors.Y.L85,
  danger: theme.colors.R.L85
};
const subtleTextColor = {
  default: theme.colors.N70,
  inverted: theme.colors.text,
  primary: theme.colors.B.D20,
  created: theme.colors.G.D20,
  warning: theme.colors.Y.D20,
  danger: theme.colors.R.D20
};
const BadgeElement = styled.div((_ref) => {
  let {
    appearance,
    variant
  } = _ref;
  return {
    backgroundColor: variant === 'bold' ? boldBackgroundColor[appearance] : subtleBackgroundColor[appearance],
    borderRadius: '2em',
    boxSizing: 'border-box',
    color: variant === 'bold' ? boldTextColor[appearance] : subtleTextColor[appearance],
    display: 'inline-block',
    fontSize: 12,
    fontWeight: 500,
    lineHeight: 1,
    minWidth: '2em',
    padding: '0.25em 0.5em',
    textAlign: 'center'
  };
});
class Badge extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getValue", (_ref2) => {
      let {
        value,
        max
      } = _ref2;
      if (value < 0) return '0';
      if (max > 0 && value > max) return "".concat(max, "+");
      return value;
    });
  }

  render() {
    const _this$props = this.props,
          {
      appearance,
      max,
      value,
      variant
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, ["appearance", "max", "value", "variant"]);

    return React__default.createElement(BadgeElement, _extends({
      appearance: appearance,
      variant: variant
    }, rest), this.getValue({
      value,
      max
    }));
  }

}

_defineProperty(Badge, "defaultProps", {
  appearance: 'default',
  max: 99,
  value: 0,
  variant: 'subtle'
});

exports.Badge = Badge;
