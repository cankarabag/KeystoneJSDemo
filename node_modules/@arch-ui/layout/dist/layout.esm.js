import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { Children, cloneElement, forwardRef } from 'react';
import styled from '@emotion/styled';
import { mediaQueries } from '@arch-ui/common';
import { gridSize } from '@arch-ui/theme';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Container
// ==============================

const CONTAINER_WIDTH = 1160;
const CONTAINER_GUTTER = gridSize * 6;
const Container = styled.div((_ref) => {
  let {
    isFullWidth
  } = _ref;
  return {
    maxWidth: isFullWidth ? '100%' : CONTAINER_WIDTH,
    paddingLeft: CONTAINER_GUTTER,
    paddingRight: CONTAINER_GUTTER,
    transition: 'max-width 200ms cubic-bezier(0.2, 0, 0, 1)',
    [mediaQueries.smOnly]: {
      paddingLeft: gridSize * 2,
      paddingRight: gridSize * 2
    }
  };
}); // ==============================
// Fluid Group
// ==============================

function collapseBorderRadii(index, length) {
  let style;
  const isFirst = index === 0;
  const isLast = index === length - 1;

  if (isLast && !isFirst) {
    style = {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    };
  } else if (isFirst && !isLast) {
    style = {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    };
  } else if (!isFirst && !isLast) {
    style = {
      borderRadius: 0
    };
  }

  return style;
}

function FlexGroupComponent(_ref2, ref) {
  let {
    align = 'stretch',
    as: Tag = 'div',
    children,
    growIndexes = [],
    isContiguous,
    isInline,
    isVertical,
    justify = 'flex-start',
    wrap,
    spacing = gridSize,
    stretch
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["align", "as", "children", "growIndexes", "isContiguous", "isInline", "isVertical", "justify", "wrap", "spacing", "stretch"]);

  const gutter = spacing / 2;
  const length = Children.count(children);
  const childArray = Children.toArray(children).filter(child => child); // filter out null and undefined children

  return jsx(Tag, _extends({
    css: {
      alignItems: align,
      display: isInline ? 'inline-flex' : 'flex',
      flexDirection: isVertical ? 'column' : 'row',
      flexWrap: wrap ? 'wrap' : 'nowrap',
      justifyContent: justify,
      marginBottom: isVertical ? -gutter : null,
      marginLeft: isContiguous || isVertical ? null : -gutter,
      marginRight: isContiguous || isVertical ? null : -gutter,
      marginTop: isVertical ? -gutter : null,
      maxWidth: isInline ? "calc(100% + ".concat(gutter * 2, "px)") : null
    },
    ref: ref
  }, props), childArray.map((child, idx) => {
    const style = isContiguous ? collapseBorderRadii(idx, length) : null;
    const leftOffset = isContiguous && idx ? -1 : gutter;
    const rightOffset = isContiguous ? null : gutter;
    return jsx("div", {
      key: child.key,
      css: {
        flex: stretch || growIndexes.includes(idx) ? 1 : null,
        marginLeft: isVertical ? null : leftOffset,
        marginRight: isVertical ? null : rightOffset,
        marginTop: isVertical ? gutter : null,
        marginBottom: isVertical ? gutter : null,
        minWidth: 0,
        // allows text-overflow on children
        // bring the focus styles over the top of siblings
        '&:focus-within': {
          position: 'relative'
        }
      }
    }, isContiguous ? cloneElement(child, {
      style
    }) : child);
  }));
}
const FlexGroup = forwardRef(FlexGroupComponent); // ==============================
// Grid
// ==============================
// Grid Parent
// --------------------

function formatAreas(areas) {
  return areas.map(area => "\"".concat(area, "\"")).join(' ');
}

const Grid = (_ref3) => {
  let {
    alignContent,
    areas,
    columns = 12,
    flow = 'row',
    gap = 8,
    justifyContent,
    minRowHeight = 20,
    rows
  } = _ref3,
      props = _objectWithoutProperties(_ref3, ["alignContent", "areas", "columns", "flow", "gap", "justifyContent", "minRowHeight", "rows"]);

  const templateRows = rows ? {
    gridTemplateRows: rows
  } : {};
  const templateAreas = areas ? {
    gridTemplateAreas: formatAreas(areas)
  } : {};
  const gridTemplateColumns = Number.isInteger(columns) ? "repeat(".concat(columns, ", 1fr)") : columns;
  return jsx("div", _extends({
    css: _objectSpread({
      display: 'grid',
      gridAutoFlow: flow,
      gridAutoRows: "minmax(".concat(minRowHeight, "px, auto)"),
      gridGap: gap,
      gridTemplateColumns,
      justifyContent,
      alignContent
    }, templateRows, {}, templateAreas)
  }, props));
};
const Cell = (_ref4) => {
  let {
    area,
    height = 1,
    left,
    top,
    width = 1
  } = _ref4,
      props = _objectWithoutProperties(_ref4, ["area", "height", "left", "top", "width"]);

  return jsx("div", _extends({
    css: {
      alignContent: 'space-around',
      gridArea: area,
      gridColumnEnd: "span ".concat(width),
      gridColumnStart: left,
      gridRowEnd: "span ".concat(height),
      gridRowStart: top,
      height: '100%',
      minWidth: 0
    }
  }, props));
};

export { CONTAINER_GUTTER, CONTAINER_WIDTH, Cell, Container, FlexGroup, FlexGroupComponent, Grid };
