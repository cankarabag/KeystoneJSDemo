"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), react = require("react"), reactDom = require("react-dom"), styled = _interopDefault(require("@emotion/styled")), ScrollLock = _interopDefault(require("react-scrolllock")), reactFocusMarshal = require("react-focus-marshal"), modalUtils = require("@arch-ui/modal-utils"), theme = require("@arch-ui/theme"), colorUtils = require("@arch-ui/color-utils"), typography = require("@arch-ui/typography");

let allStackConsumers = {
  left: [],
  right: []
}, updateStackConsumers = slideInFrom => {
  allStackConsumers[slideInFrom].forEach(update => {
    update();
  });
};

function useStackIndex(isOpen, slideInFrom) {
  let [stackIndex, setStackIndex] = react.useState(isOpen ? 0 : -1);
  return react.useLayoutEffect(() => {
    if (isOpen) {
      let update = () => {
        setStackIndex(allStackConsumers[slideInFrom].indexOf(update));
      };
      return allStackConsumers[slideInFrom].unshift(update), updateStackConsumers(slideInFrom), 
      () => {
        allStackConsumers[slideInFrom] = allStackConsumers[slideInFrom].filter(x => x !== update), 
        updateStackConsumers(slideInFrom);
      };
    }
    setStackIndex(-1);
  }, [ isOpen, slideInFrom ]), stackIndex;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const innerGutter = 2 * theme.gridSize, Positioner = _ref => {
  let {slideInFrom: slideInFrom, width: width, stackIndex: stackIndex, style: {transform: transform}} = _ref, style = _objectWithoutProperties(_ref.style, [ "transform" ]), props = _objectWithoutProperties(_ref, [ "slideInFrom", "width", "stackIndex", "style" ]);
  const stackTransforms = stackIndex <= 0 ? [] : [ "translate(calc(".concat(.3 * stackIndex, " * -9vw))"), "scale(".concat(1 - stackIndex / 50, ")") ];
  return core.jsx("div", _extends({
    css: _objectSpread({
      boxSizing: "border-box",
      padding: theme.gridSize,
      display: "flex",
      flexDirection: "column",
      height: "100%",
      maxWidth: "90%",
      position: "fixed",
      [slideInFrom]: 0,
      top: 0,
      width: width,
      zIndex: 2,
      transform: "".concat(transform).concat(stackTransforms.join(" "))
    }, style)
  }, props));
}, Dialog = react.forwardRef((_ref2, ref) => {
  let {component: Tag} = _ref2, props = _objectWithoutProperties(_ref2, [ "component" ]);
  return core.jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: "white",
      boxShadow: theme.shadows[3],
      borderRadius: 2 * theme.borderRadius,
      display: "flex",
      flex: 1,
      flexDirection: "column",
      maxHeight: "100%"
    }
  }, props));
}), HeadFoot = styled.div({
  lineHeight: 1,
  margin: "0 ".concat(innerGutter, "px"),
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  position: "relative",
  zIndex: 1
}), Header = styled(HeadFoot)({
  boxShadow: "0 2px 0 ".concat(colorUtils.alpha(theme.colors.text, .12))
}), Footer = styled(HeadFoot)({
  boxShadow: "0 -2px 0 ".concat(colorUtils.alpha(theme.colors.text, .12))
}), Body = styled.div({
  lineHeight: 1.4,
  overflowY: "auto",
  padding: innerGutter
});

function useKeydownHandler(handler) {
  let handlerRef = react.useRef(handler);
  react.useEffect(() => {
    handlerRef.current = handler;
  }), react.useEffect(() => {
    function handle(event) {
      handlerRef.current(event);
    }
    return document.addEventListener("keydown", handle, !1), () => {
      document.removeEventListener("keydown", handle, !1);
    };
  }, []);
}

function ModalDialogComponent(_ref3) {
  let {attachTo: attachTo, children: children, closeOnBlanketClick: closeOnBlanketClick, component: component, footer: footer, heading: heading, initialFocus: initialFocus, onClose: onClose, slideInFrom: slideInFrom, width: width, onKeyDown: onKeyDown, transitionState: transitionState, isOpen: isOpen} = _ref3, stackIndex = useStackIndex("entered" === transitionState || "entering" === transitionState, slideInFrom);
  useKeydownHandler(event => {
    onKeyDown && 0 === stackIndex && onKeyDown(event);
  });
  const dialogTitleId = react.useMemo(modalUtils.generateUEID, []);
  return attachTo ? reactDom.createPortal(core.jsx(react.Fragment, null, isOpen ? core.jsx(modalUtils.Blanket, {
    style: modalUtils.fade(transitionState),
    onClick: closeOnBlanketClick ? onClose : void 0,
    isTinted: !0
  }) : null, core.jsx(Positioner, {
    style: modalUtils.slideInHorizontal(transitionState, {
      slideInFrom: slideInFrom
    }),
    slideInFrom: slideInFrom,
    width: width,
    stackIndex: stackIndex
  }, core.jsx(reactFocusMarshal.FocusTrap, {
    options: {
      initialFocus: initialFocus,
      clickOutsideDeactivates: closeOnBlanketClick
    }
  }, core.jsx(Dialog, {
    component: component,
    "aria-labelledby": dialogTitleId
  }, core.jsx(typography.A11yText, {
    id: dialogTitleId
  }, heading, " Dialog"), heading ? core.jsx(Header, null, core.jsx(typography.Title, null, heading)) : null, core.jsx(Body, null, children), footer ? core.jsx(Footer, null, footer) : null))), core.jsx(ScrollLock, null)), attachTo) : null;
}

ModalDialogComponent.defaultProps = {
  attachTo: "undefined" != typeof document ? document.body : null,
  closeOnBlanketClick: !1,
  component: "div",
  width: 640
};

const ModalDialog = react.memo(ModalDialogComponent);

var index = modalUtils.withTransitionState(ModalDialog);

exports.default = index;
