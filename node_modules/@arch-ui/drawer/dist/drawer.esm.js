import _extends from '@babel/runtime/helpers/esm/extends';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { useState, useLayoutEffect, forwardRef, memo, useMemo, Fragment, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import styled from '@emotion/styled';
import ScrollLock from 'react-scrolllock';
import { FocusTrap } from 'react-focus-marshal';
import { withTransitionState, generateUEID, Blanket, fade, slideInHorizontal } from '@arch-ui/modal-utils';
import { shadows, borderRadius, colors, gridSize } from '@arch-ui/theme';
import { alpha } from '@arch-ui/color-utils';
import { A11yText, Title } from '@arch-ui/typography';

// inspired by https://bitbucket.org/atlassian/atlaskit-mk-2/src/75c59d2c870d7e2489d6baea9a6837f9bd4082c4/packages/core/modal-dialog/src/components/StackConsumer.js
// TODO: investigate if this will cause problems with concurrent mode

let allStackConsumers = {
  left: [],
  right: []
};

let updateStackConsumers = slideInFrom => {
  allStackConsumers[slideInFrom].forEach(update => {
    update();
  });
}; // This hook provides the position of a modal dialog in the list of all open dialogs.
// The key behaviours are:
// - When a modal renders for the first time it takes the first stack position
// - When a modal mounts, all other modals have to adjust their position
// - When a modal unmounts, all other modals have to adjust their position


function useStackIndex(isOpen, slideInFrom) {
  let [stackIndex, setStackIndex] = useState(isOpen ? 0 : -1);
  useLayoutEffect(() => {
    if (isOpen) {
      let update = () => {
        setStackIndex(allStackConsumers[slideInFrom].indexOf(update));
      };

      allStackConsumers[slideInFrom].unshift(update);
      updateStackConsumers(slideInFrom);
      return () => {
        allStackConsumers[slideInFrom] = allStackConsumers[slideInFrom].filter(x => x !== update);
        updateStackConsumers(slideInFrom);
      };
    } else {
      setStackIndex(-1);
    }
  }, [isOpen, slideInFrom]);
  return stackIndex;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const innerGutter = gridSize * 2; // Styled Components
// ------------------------------

const Positioner = (_ref) => {
  let {
    slideInFrom,
    width,
    stackIndex,
    style: {
      transform
    }
  } = _ref,
      style = _objectWithoutProperties(_ref.style, ["transform"]),
      props = _objectWithoutProperties(_ref, ["slideInFrom", "width", "stackIndex", "style"]);

  const stackTransforms = stackIndex <= 0 ? [] : ["translate(calc(".concat(stackIndex * 0.3, " * -9vw))"), "scale(".concat(1 - stackIndex / 50, ")")];
  return jsx("div", _extends({
    css: _objectSpread({
      boxSizing: 'border-box',
      padding: gridSize,
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      maxWidth: '90%',
      position: 'fixed',
      [slideInFrom]: 0,
      top: 0,
      width,
      zIndex: 2,
      transform: "".concat(transform).concat(stackTransforms.join(' '))
    }, style)
  }, props));
};

const Dialog = forwardRef((_ref2, ref) => {
  let {
    component: Tag
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["component"]);

  return jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: 'white',
      boxShadow: shadows[3],
      borderRadius: borderRadius * 2,
      display: 'flex',
      flex: 1,
      flexDirection: 'column',
      // margin: gridSize,
      maxHeight: '100%'
    }
  }, props));
}); // Content

const HeadFoot = styled.div({
  lineHeight: 1,
  margin: "0 ".concat(innerGutter, "px"),
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  // ensure that box-shadow covers body content
  position: 'relative',
  zIndex: 1
});
const Header = styled(HeadFoot)({
  boxShadow: "0 2px 0 ".concat(alpha(colors.text, 0.12))
});
const Footer = styled(HeadFoot)({
  boxShadow: "0 -2px 0 ".concat(alpha(colors.text, 0.12))
});
const Body = styled.div({
  lineHeight: 1.4,
  overflowY: 'auto',
  padding: innerGutter
});

function useKeydownHandler(handler) {
  let handlerRef = useRef(handler);
  useEffect(() => {
    handlerRef.current = handler;
  });
  useEffect(() => {
    function handle(event) {
      handlerRef.current(event);
    }

    document.addEventListener('keydown', handle, false);
    return () => {
      document.removeEventListener('keydown', handle, false);
    };
  }, []);
}

function ModalDialogComponent(_ref3) {
  let {
    attachTo,
    children,
    closeOnBlanketClick,
    component,
    footer,
    heading,
    initialFocus,
    onClose,
    slideInFrom,
    width,
    onKeyDown,
    transitionState,
    isOpen
  } = _ref3;
  let stackIndex = useStackIndex(transitionState === 'entered' || transitionState === 'entering', slideInFrom);
  useKeydownHandler(event => {
    if (onKeyDown && stackIndex === 0) {
      onKeyDown(event);
    }
  });
  const dialogTitleId = useMemo(generateUEID, []);

  if (!attachTo) {
    return null;
  }

  return createPortal(jsx(Fragment, null, isOpen ? jsx(Blanket, {
    style: fade(transitionState),
    onClick: closeOnBlanketClick ? onClose : undefined,
    isTinted: true
  }) : null, jsx(Positioner, {
    style: slideInHorizontal(transitionState, {
      slideInFrom
    }),
    slideInFrom: slideInFrom,
    width: width,
    stackIndex: stackIndex
  }, jsx(FocusTrap, {
    options: {
      initialFocus,
      clickOutsideDeactivates: closeOnBlanketClick
    }
  }, jsx(Dialog, {
    component: component,
    "aria-labelledby": dialogTitleId
  }, jsx(A11yText, {
    id: dialogTitleId
  }, heading, " Dialog"), heading ? jsx(Header, null, jsx(Title, null, heading)) : null, jsx(Body, null, children), footer ? jsx(Footer, null, footer) : null))), jsx(ScrollLock, null)), attachTo);
}

ModalDialogComponent.defaultProps = {
  attachTo: typeof document !== 'undefined' ? document.body : null,
  closeOnBlanketClick: false,
  component: 'div',
  width: 640
};
const ModalDialog = memo(ModalDialogComponent);
var index = withTransitionState(ModalDialog);

export default index;
