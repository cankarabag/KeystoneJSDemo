import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import React, { forwardRef, PureComponent, Fragment } from 'react';
import { createPortal } from 'react-dom';
import ScrollLock from 'react-scrolllock';
import { FocusTrap } from 'react-focus-marshal';
import { withTransitionState, generateUEID, Blanket, fade, slideUp } from '@arch-ui/modal-utils';
import { A11yText } from '@arch-ui/typography';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import styled from '@emotion/styled';
import { colors } from '@arch-ui/theme';
import { alpha } from '@arch-ui/color-utils';

const outerGutter = 40;
const innerGutter = 20;
const Positioner = styled.div((_ref) => {
  let {
    width
  } = _ref;
  return {
    display: 'flex',
    flexDirection: 'column',
    left: 0,
    marginLeft: 'auto',
    marginRight: 'auto',
    maxHeight: "calc(100% - ".concat(outerGutter * 2, "px)"),
    maxWidth: width,
    position: 'fixed',
    right: 0,
    top: outerGutter,
    zIndex: 2
  };
});
const Dialog = forwardRef((_ref2, ref) => {
  let {
    component: Tag
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["component"]);

  return jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: 'white',
      borderRadius: 5,
      boxShadow: '0 2px 8px -1px rgba(0,0,0,0.3)',
      display: 'flex',
      flex: 1,
      flexDirection: 'column',
      maxHeight: '100%'
    }
  }, props));
});
const HeadFoot = styled.div({
  lineHeight: 1,
  margin: "0 ".concat(innerGutter, "px"),
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  // ensure that box-shadow covers body content
  position: 'relative',
  zIndex: 1
});
const Header = styled(HeadFoot)({
  boxShadow: "0 2px 0 ".concat(alpha(colors.text, 0.12))
});
const Footer = styled(HeadFoot)({
  boxShadow: "0 -2px 0 ".concat(alpha(colors.text, 0.12))
});
const Title = styled.h3({
  fontSize: 18,
  fontWeight: 500,
  margin: 0
});
const Body = styled.div({
  lineHeight: 1.4,
  overflowY: 'auto',
  padding: innerGutter
});

class ModalDialog extends PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onKeyDown", e => {
      if (this.props.onKeyDown) this.props.onKeyDown(e);
    });
  }

  componentDidMount() {
    document.addEventListener('keydown', this.onKeyDown, false);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.onKeyDown, false);
  }

  render() {
    const {
      attachTo,
      children,
      closeOnBlanketClick,
      component,
      footer,
      heading,
      initialFocus,
      onClose,
      width,
      transitionState
    } = this.props;
    const dialogTitleId = generateUEID();

    if (!attachTo) {
      return null;
    }

    return createPortal(React.createElement(Fragment, null, React.createElement(Blanket, {
      style: fade(transitionState),
      onClick: closeOnBlanketClick ? onClose : undefined,
      isTinted: true
    }), React.createElement(Positioner, {
      style: slideUp(transitionState),
      width: width
    }, React.createElement(FocusTrap, {
      options: {
        initialFocus,
        clickOutsideDeactivates: closeOnBlanketClick
      }
    }, React.createElement(Dialog, {
      component: component,
      "aria-labelledby": dialogTitleId
    }, React.createElement(A11yText, {
      id: dialogTitleId
    }, heading, " Dialog"), heading ? React.createElement(Header, null, React.createElement(Title, null, heading)) : null, React.createElement(Body, null, children), footer ? React.createElement(Footer, null, footer) : null))), React.createElement(ScrollLock, null)), attachTo);
  }

}

_defineProperty(ModalDialog, "defaultProps", {
  attachTo: typeof document !== 'undefined' ? document.body : null,
  closeOnBlanketClick: false,
  component: 'div',
  width: 640
});

var Dialog$1 = withTransitionState(ModalDialog);

export default Dialog$1;
