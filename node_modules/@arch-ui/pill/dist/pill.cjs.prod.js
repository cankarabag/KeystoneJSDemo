"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), core = require("@emotion/core"), styled = _interopDefault(require("@emotion/styled")), react = require("react"), icons = require("@arch-ui/icons"), theme = require("@arch-ui/theme"), common = require("@arch-ui/common");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const boldBackgroundColor = {
  default: {
    default: theme.colors.N60,
    hover: theme.colors.N50,
    active: theme.colors.N70
  },
  primary: {
    default: theme.colors.primary,
    hover: theme.colors.B.L10,
    active: theme.colors.B.D10
  },
  danger: {
    default: theme.colors.danger,
    hover: theme.colors.R.L10,
    active: theme.colors.R.D10
  },
  create: {
    default: theme.colors.create,
    hover: theme.colors.G.L10,
    active: theme.colors.G.D10
  },
  warning: {
    default: theme.colors.warning,
    hover: theme.colors.Y.L10,
    active: theme.colors.Y.D10
  }
}, boldTextColor = {
  default: "white",
  primary: "white",
  danger: "white",
  create: "white",
  warning: "white"
}, subtleBackgroundColor = {
  default: {
    default: theme.colors.N10,
    hover: theme.colors.N15,
    active: theme.colors.N20
  },
  primary: {
    default: theme.colors.B.L85,
    hover: theme.colors.B.L80,
    active: theme.colors.B.L75
  },
  danger: {
    default: theme.colors.R.L85,
    hover: theme.colors.R.L80,
    active: theme.colors.R.L75
  },
  create: {
    default: theme.colors.G.L85,
    hover: theme.colors.G.L80,
    active: theme.colors.G.L75
  },
  warning: {
    default: theme.colors.Y.L85,
    hover: theme.colors.Y.L80,
    active: theme.colors.Y.L75
  }
}, subtleTextColor = {
  default: theme.colors.N50,
  primary: theme.colors.primary,
  danger: theme.colors.danger,
  create: theme.colors.create,
  warning: theme.colors.warning
}, PillWrapper = styled.div({
  display: "inline-flex"
}), PillButton = styled.button(_ref => {
  let {appearance: appearance, variant: variant} = _ref;
  const fontSize = "".concat(.85, "rem"), borderRadius = "".concat(1.7, "rem");
  return _objectSpread({}, common.uniformHeight, {
    backgroundColor: "bold" === variant ? boldBackgroundColor[appearance].default : subtleBackgroundColor[appearance].default,
    color: "bold" === variant ? boldTextColor[appearance] : subtleTextColor[appearance],
    alignItems: "center",
    border: 0,
    cursor: "pointer",
    display: "flex",
    fontSize: fontSize,
    justifyContent: "center",
    maxWidth: "100%",
    minWidth: 1,
    outline: 0,
    ":hover,:focus": {
      backgroundColor: "bold" === variant ? boldBackgroundColor[appearance].hover : subtleBackgroundColor[appearance].hover
    },
    ":active": {
      backgroundColor: "bold" === variant ? boldBackgroundColor[appearance].active : subtleBackgroundColor[appearance].active
    },
    ":first-of-type": {
      paddingLeft: "0.9em",
      paddingRight: "0.75em",
      borderTopLeftRadius: borderRadius,
      borderBottomLeftRadius: borderRadius,
      marginRight: 1
    },
    ":last-of-type": {
      paddingLeft: "0.75em",
      paddingRight: "0.9em",
      borderTopRightRadius: borderRadius,
      borderBottomRightRadius: borderRadius,
      marginLeft: 1
    }
  });
}), Pill = react.forwardRef((_ref2, ref) => {
  let {appearance: appearance = "default", children: children, onClick: onClick, onRemove: onRemove, variant: variant = "subtle"} = _ref2, props = _objectWithoutProperties(_ref2, [ "appearance", "children", "onClick", "onRemove", "variant" ]);
  return core.jsx(PillWrapper, _extends({}, props, {
    ref: ref
  }), core.jsx(PillButton, {
    appearance: appearance,
    variant: variant,
    onClick: onClick
  }, children), onRemove ? core.jsx(PillButton, {
    appearance: appearance,
    variant: variant,
    onClick: onRemove
  }, core.jsx(icons.XIcon, {
    css: {
      height: 12
    }
  })) : null);
});

exports.Pill = Pill;
