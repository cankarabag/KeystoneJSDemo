"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), react = require("react"), core = require("@emotion/core"), styled = _interopDefault(require("@emotion/styled")), loading = require("@arch-ui/loading"), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), reactRouterDom = require("react-router-dom"), reactPseudoState = require("react-pseudo-state"), theme = require("@arch-ui/theme"), common = require("@arch-ui/common"), colorUtils = require("@arch-ui/color-utils");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const boldAppearance = {
  default: {
    bg: "#fff",
    border: theme.colors.N20,
    focusRing: theme.colors.primary,
    text: theme.colors.text
  },
  primary: {
    bg: theme.colors.primary,
    border: theme.colors.primary,
    focusRing: null,
    text: "#fff"
  },
  create: {
    bg: theme.colors.create,
    border: theme.colors.create,
    focusRing: null,
    text: "#fff"
  },
  danger: {
    bg: theme.colors.danger,
    border: theme.colors.danger,
    focusRing: null,
    text: "#fff"
  },
  warning: {
    bg: theme.colors.warning,
    border: theme.colors.warning,
    focusRing: null,
    text: "#fff"
  }
}, ghostAppearance = {
  default: {
    border: theme.colors.N20,
    text: theme.colors.N60
  },
  primary: {
    border: theme.colors.B.L50,
    text: theme.colors.primary
  },
  create: {
    border: theme.colors.G.L50,
    text: theme.colors.create
  },
  danger: {
    border: theme.colors.R.L50,
    text: theme.colors.danger
  },
  warning: {
    border: theme.colors.Y.L30,
    text: theme.colors.warning
  }
}, subtleAppearance = {
  default: {
    text: theme.colors.N40,
    textHover: theme.colors.text
  },
  primary: {
    text: theme.colors.N40,
    textHover: theme.colors.primary
  },
  create: {
    text: null,
    textHover: null
  },
  warning: {
    text: theme.colors.N40,
    textHover: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger,
    textHover: theme.colors.danger
  }
}, nuanceAppearance = {
  default: {
    text: theme.colors.text
  },
  primary: {
    text: theme.colors.primary
  },
  create: {
    text: null
  },
  warning: {
    text: theme.colors.danger
  },
  danger: {
    text: theme.colors.danger
  }
};

function makeSubtleVariant(_ref) {
  let {appearance: appearance} = _ref;
  const {text: text, textHover: textHover} = subtleAppearance[appearance];
  return {
    color: text,
    fontWeight: null,
    ":hover, :focus": {
      color: textHover,
      textDecoration: "underline"
    }
  };
}

function makeNuanceVariant(_ref2) {
  let {appearance: appearance, isDisabled: isDisabled} = _ref2;
  const {text: text} = nuanceAppearance[appearance];
  return {
    color: text,
    fontWeight: "normal",
    ":hover, :focus": makeGhostVariant({
      appearance: appearance,
      isDisabled: isDisabled
    })
  };
}

function makeGhostVariant(_ref3) {
  let {appearance: appearance, isDisabled: isDisabled} = _ref3;
  const {border: border, text: text} = ghostAppearance[appearance];
  return {
    border: "1px solid",
    borderColor: border,
    color: text,
    fontWeight: "normal",
    opacity: isDisabled ? .5 : null,
    ":hover, :focus": {
      backgroundColor: colorUtils.alpha(border, .1),
      borderColor: colorUtils.darken(border, 10)
    },
    ":active": {
      color: colorUtils.darken(text, 10),
      borderColor: colorUtils.darken(border, 20),
      backgroundColor: colorUtils.alpha(border, .2)
    }
  };
}

function makeBoldVariant(_ref4) {
  let {appearance: appearance, isDisabled: isDisabled, isActive: isActive, isHover: isHover, isFocus: isFocus, isSelected: isSelected} = _ref4;
  const {bg: bg, border: border, focusRing: focusRing, text: text} = boldAppearance[appearance], activeBg = "default" === appearance ? theme.colors.N10 : colorUtils.darken(bg, 12), hoverAndFocus = isHover || isFocus ? {
    borderColor: border,
    background: bg
  } : null, hoverStyles = isHover ? _objectSpread({}, hoverAndFocus, {
    boxShadow: "0 1px 2px rgba(0, 0, 0, 0.12)"
  }) : null, focusStyles = isFocus && !isDisabled ? _objectSpread({}, hoverAndFocus, {
    borderColor: focusRing,
    boxShadow: "0 0 0 3px ".concat(colorUtils.alpha(focusRing || bg, .2))
  }) : null;
  return _objectSpread({
    backgroundColor: bg,
    backgroundRepeat: "repeat-x",
    borderColor: border,
    color: text,
    fontWeight: "bold"
  }, hoverStyles, {}, focusStyles, {}, isActive || isSelected ? {
    background: activeBg,
    borderColor: border
  } : null);
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$1(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const SPACING_OPTION = {
  comfortable: "".concat(theme.gridSize, "px ").concat(1.5 * theme.gridSize, "px"),
  cozy: "2px 6px",
  cramped: "1px 2px"
};

function makeVariant(_ref) {
  let variantStyles, {appearance: appearance = "default", isActive: isActive, isBlock: isBlock, isHover: isHover, isFocus: isFocus, isDisabled: isDisabled, isSelected: isSelected, variant: variant = "bold", spacing: spacing = "comfortable"} = _ref;
  const config = {
    appearance: appearance,
    isDisabled: isDisabled,
    isActive: isActive,
    isHover: isHover,
    isFocus: isFocus,
    isSelected: isSelected
  };
  return "subtle" === variant ? variantStyles = makeSubtleVariant(config) : "nuance" === variant ? variantStyles = makeNuanceVariant(config) : "bold" === variant ? variantStyles = makeBoldVariant(config) : "ghost" === variant && (variantStyles = makeGhostVariant(config)), 
  _objectSpread$1({}, common.uniformHeight, {
    cursor: isDisabled ? "default" : "pointer",
    display: isBlock ? "block" : "inline-block",
    opacity: isDisabled ? .66 : null,
    outline: 0,
    padding: SPACING_OPTION[spacing],
    pointerEvents: isDisabled ? "none" : null,
    textAlign: "center",
    touchAction: "manipulation",
    userSelect: "none",
    width: isBlock ? "100%" : null,
    ":hover": {
      textDecoration: "none"
    }
  }, variantStyles);
}

function ButtonElementComponent(props, ref) {
  const {isDisabled: isDisabled, isActive: isActive, isFocus: isFocus, isHover: isHover, isSelected: isSelected, focusOrigin: focusOrigin} = props, rest = _objectWithoutProperties(props, [ "isDisabled", "isActive", "isFocus", "isHover", "isSelected", "focusOrigin" ]), variant = makeVariant(props);
  return rest.to ? core.jsx(reactRouterDom.Link, _extends({
    innerRef: ref,
    css: variant
  }, rest)) : rest.href ? core.jsx("a", _extends({
    css: variant
  }, rest, {
    ref: ref
  })) : core.jsx("button", _extends({
    type: "button",
    disabled: isDisabled,
    css: variant,
    ref: ref
  }, rest));
}

const ButtonElement = react.forwardRef(ButtonElementComponent), Button = reactPseudoState.withPseudoState(ButtonElement), LoadingButtonInner = styled.div({
  position: "relative"
}), LoadingIndicatorWrapper = styled.div({
  left: "50%",
  position: "absolute",
  top: "50%",
  transform: "translate(-50%, -50%)"
});

function getAppearance(appearance) {
  return "default" === appearance ? "dark" : "inverted";
}

function LoadingButtonComponent(_ref, ref) {
  let {children: children, indicatorVariant: indicatorVariant, isLoading: isLoading} = _ref, props = _objectWithoutProperties(_ref, [ "children", "indicatorVariant", "isLoading" ]);
  const appearance = getAppearance(props.appearance || "default"), textCSS = isLoading ? {
    visibility: "hidden"
  } : null, isSpinner = "spinner" === indicatorVariant;
  return core.jsx(Button, _extends({
    ref: ref,
    variant: "bold"
  }, props), core.jsx(LoadingButtonInner, null, isLoading ? core.jsx(LoadingIndicatorWrapper, null, isSpinner ? core.jsx(loading.LoadingSpinner, {
    appearance: appearance,
    size: 16
  }) : core.jsx(loading.LoadingIndicator, {
    appearance: appearance,
    size: 4
  })) : null, core.jsx("span", {
    css: textCSS
  }, children)));
}

const LoadingButton = react.forwardRef(LoadingButtonComponent), IconButton = react.forwardRef((_ref, ref) => {
  let {children: children, icon: Icon, iconSize: iconSize = 16} = _ref, props = _objectWithoutProperties(_ref, [ "children", "icon", "iconSize" ]);
  return core.jsx(Button, _extends({
    ref: ref
  }, props), core.jsx("span", {
    css: {
      display: "flex",
      alignItems: "center"
    }
  }, core.jsx(Icon, {
    css: children ? {
      height: iconSize,
      width: iconSize,
      marginRight: "0.5em"
    } : null
  }), children));
});

exports.Button = Button, exports.IconButton = IconButton, exports.LoadingButton = LoadingButton;
