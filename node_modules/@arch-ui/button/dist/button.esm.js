import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { forwardRef } from 'react';
import { jsx } from '@emotion/core';
import styled from '@emotion/styled';
import { LoadingSpinner, LoadingIndicator } from '@arch-ui/loading';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { Link } from 'react-router-dom';
import { withPseudoState } from 'react-pseudo-state';
import { colors, gridSize } from '@arch-ui/theme';
import { uniformHeight } from '@arch-ui/common';
import { alpha, darken } from '@arch-ui/color-utils';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const boldAppearance = {
  default: {
    bg: '#fff',
    border: colors.N20,
    focusRing: colors.primary,
    text: colors.text
  },
  primary: {
    bg: colors.primary,
    border: colors.primary,
    focusRing: null,
    text: '#fff'
  },
  create: {
    bg: colors.create,
    border: colors.create,
    focusRing: null,
    text: '#fff'
  },
  danger: {
    bg: colors.danger,
    border: colors.danger,
    focusRing: null,
    text: '#fff'
  },
  warning: {
    bg: colors.warning,
    border: colors.warning,
    focusRing: null,
    text: '#fff'
  }
};
const ghostAppearance = {
  default: {
    border: colors.N20,
    text: colors.N60
  },
  primary: {
    border: colors.B.L50,
    text: colors.primary
  },
  create: {
    border: colors.G.L50,
    text: colors.create
  },
  danger: {
    border: colors.R.L50,
    text: colors.danger
  },
  warning: {
    border: colors.Y.L30,
    text: colors.warning
  }
};
const subtleAppearance = {
  default: {
    text: colors.N40,
    textHover: colors.text
  },
  primary: {
    text: colors.N40,
    textHover: colors.primary
  },
  create: {
    text: null,
    textHover: null
  },
  warning: {
    text: colors.N40,
    textHover: colors.danger
  },
  danger: {
    text: colors.danger,
    textHover: colors.danger
  }
};
const nuanceAppearance = {
  default: {
    text: colors.text
  },
  primary: {
    text: colors.primary
  },
  create: {
    text: null
  },
  warning: {
    text: colors.danger
  },
  danger: {
    text: colors.danger
  }
};
function makeSubtleVariant(_ref) {
  let {
    appearance
  } = _ref;
  const {
    text,
    textHover
  } = subtleAppearance[appearance];
  return {
    color: text,
    fontWeight: null,
    ':hover, :focus': {
      color: textHover,
      textDecoration: 'underline'
    }
  };
}
function makeNuanceVariant(_ref2) {
  let {
    appearance,
    isDisabled
  } = _ref2;
  const {
    text
  } = nuanceAppearance[appearance];
  return {
    color: text,
    fontWeight: 'normal',
    ':hover, :focus': makeGhostVariant({
      appearance,
      isDisabled
    })
  };
} // Ghost
// ------------------------------

function makeGhostVariant(_ref3) {
  let {
    appearance,
    isDisabled
  } = _ref3;
  const {
    border,
    text
  } = ghostAppearance[appearance];
  return {
    border: '1px solid',
    borderColor: border,
    color: text,
    fontWeight: 'normal',
    opacity: isDisabled ? 0.5 : null,
    ':hover, :focus': {
      backgroundColor: alpha(border, 0.1),
      borderColor: darken(border, 10)
    },
    ':active': {
      color: darken(text, 10),
      borderColor: darken(border, 20),
      backgroundColor: alpha(border, 0.2)
    }
  };
} // Bold
// ------------------------------

function makeBoldVariant(_ref4) {
  let {
    appearance,
    isDisabled,
    isActive,
    isHover,
    isFocus,
    isSelected
  } = _ref4;
  const {
    bg,
    border,
    focusRing,
    text
  } = boldAppearance[appearance];
  const activeBg = appearance === 'default' ? colors.N10 : darken(bg, 12);
  const hoverAndFocus = isHover || isFocus ? {
    borderColor: border,
    background: bg
  } : null;
  const hoverStyles = isHover ? _objectSpread({}, hoverAndFocus, {
    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.12)'
  }) : null;
  const focusStyles = isFocus && !isDisabled ? _objectSpread({}, hoverAndFocus, {
    borderColor: focusRing,
    boxShadow: "0 0 0 3px ".concat(alpha(focusRing || bg, 0.2))
  }) : null;
  const activeStyles = isActive || isSelected ? {
    background: activeBg,
    borderColor: border
  } : null;
  return _objectSpread({
    backgroundColor: bg,
    backgroundRepeat: 'repeat-x',
    borderColor: border,
    color: text,
    fontWeight: 'bold'
  }, hoverStyles, {}, focusStyles, {}, activeStyles);
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const SPACING_OPTION = {
  comfortable: "".concat(gridSize, "px ").concat(gridSize * 1.5, "px"),
  cozy: '2px 6px',
  cramped: '1px 2px'
};

function makeVariant(_ref) {
  let {
    appearance = 'default',
    isActive,
    isBlock,
    isHover,
    isFocus,
    isDisabled,
    isSelected,
    variant = 'bold',
    spacing = 'comfortable'
  } = _ref;
  let variantStyles;
  const config = {
    appearance,
    isDisabled,
    isActive,
    isHover,
    isFocus,
    isSelected
  };

  if (variant === 'subtle') {
    variantStyles = makeSubtleVariant(config);
  } else if (variant === 'nuance') {
    variantStyles = makeNuanceVariant(config);
  } else if (variant === 'bold') {
    variantStyles = makeBoldVariant(config);
  } else if (variant === 'ghost') {
    variantStyles = makeGhostVariant(config);
  }

  return _objectSpread$1({}, uniformHeight, {
    cursor: isDisabled ? 'default' : 'pointer',
    display: isBlock ? 'block' : 'inline-block',
    opacity: isDisabled ? 0.66 : null,
    outline: 0,
    padding: SPACING_OPTION[spacing],
    pointerEvents: isDisabled ? 'none' : null,
    textAlign: 'center',
    touchAction: 'manipulation',
    // Disables "double-tap to zoom" for mobile; removes delay on click events
    userSelect: 'none',
    width: isBlock ? '100%' : null,
    // override possible anchor styles
    ':hover': {
      textDecoration: 'none'
    }
  }, variantStyles);
} // remove props that will create react DOM warnings


function ButtonElementComponent(props, ref) {
  const {
    isDisabled,
    isActive,
    isFocus,
    isHover,
    isSelected,
    focusOrigin
  } = props,
        rest = _objectWithoutProperties(props, ["isDisabled", "isActive", "isFocus", "isHover", "isSelected", "focusOrigin"]);

  const variant = makeVariant(props);

  if (rest.to) {
    return jsx(Link, _extends({
      innerRef: ref,
      css: variant
    }, rest));
  }

  if (rest.href) {
    return jsx("a", _extends({
      css: variant
    }, rest, {
      ref: ref
    }));
  }

  return jsx("button", _extends({
    type: "button",
    disabled: isDisabled,
    css: variant,
    ref: ref
  }, rest));
}

const ButtonElement = forwardRef(ButtonElementComponent);
const Button = withPseudoState(ButtonElement);

const LoadingButtonInner = styled.div({
  position: 'relative'
});
const LoadingIndicatorWrapper = styled.div({
  left: '50%',
  position: 'absolute',
  top: '50%',
  transform: 'translate(-50%, -50%)'
});

function getAppearance(appearance) {
  if (appearance === 'default') return 'dark';
  return 'inverted';
}

function LoadingButtonComponent(_ref, ref) {
  let {
    children,
    indicatorVariant,
    isLoading
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "indicatorVariant", "isLoading"]);

  const appearance = getAppearance(props.appearance || 'default');
  const textCSS = isLoading ? {
    visibility: 'hidden'
  } : null;
  const isSpinner = indicatorVariant === 'spinner';
  return jsx(Button, _extends({
    ref: ref,
    variant: "bold"
  }, props), jsx(LoadingButtonInner, null, isLoading ? jsx(LoadingIndicatorWrapper, null, isSpinner ? jsx(LoadingSpinner, {
    appearance: appearance,
    size: 16
  }) : jsx(LoadingIndicator, {
    appearance: appearance,
    size: 4
  })) : null, jsx("span", {
    css: textCSS
  }, children)));
} // Export


const LoadingButton = forwardRef(LoadingButtonComponent);

const IconButton = forwardRef((_ref, ref) => {
  let {
    children,
    icon: Icon,
    iconSize = 16
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "icon", "iconSize"]);

  return jsx(Button, _extends({
    ref: ref
  }, props), jsx("span", {
    css: {
      display: 'flex',
      alignItems: 'center'
    }
  }, jsx(Icon, {
    css: children ? {
      height: iconSize,
      width: iconSize,
      marginRight: '0.5em'
    } : null
  }), children));
});

export { Button, IconButton, LoadingButton };
