import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _extends from '@babel/runtime/helpers/esm/extends';
import { Component } from 'react';
import { Link } from 'react-router-dom';
import { createPortal } from 'react-dom';
import styled from '@emotion/styled';
import { jsx } from '@emotion/core';
import { borderRadius, shadows, gridSize, colors } from '@arch-ui/theme';
import { FocusTrap } from 'react-focus-marshal';
import { withModalHandlers, slideDown } from '@arch-ui/modal-utils';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const ItemElement = props => {
  if (props.to) return jsx(Link, props);
  if (props.href) return jsx("a", props);
  return jsx("button", _extends({
    type: "button"
  }, props));
};

const ItemInner = (_ref) => {
  let {
    children,
    icon
  } = _ref;
  return icon ? jsx("div", {
    css: {
      alignItems: 'center',
      display: 'flex',
      lineHeight: 1
    }
  }, jsx("div", {
    key: "icon",
    css: {
      marginRight: gridSize,
      width: 16,
      textAlign: 'center'
    }
  }, icon), jsx("div", {
    key: "children",
    css: {
      flex: 1
    }
  }, children)) : children;
};

const Item = (_ref2) => {
  let {
    children,
    icon,
    isDisabled
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["children", "icon", "isDisabled"]);

  return jsx(ItemElement, _extends({
    disabled: isDisabled,
    css: {
      appearance: 'none',
      background: 'none',
      border: '1px solid transparent',
      boxSizing: 'border-box',
      color: isDisabled ? colors.N40 : colors.text,
      cursor: 'pointer',
      display: 'block',
      fontSize: 14,
      lineHeight: '17px',
      margin: 0,
      padding: "".concat(gridSize, "px ").concat(gridSize * 1.5, "px"),
      pointerEvents: isDisabled ? 'none' : null,
      textAlign: 'left',
      transition: 'box-shadow 100ms linear',
      verticalAlign: 'middle',
      whiteSpace: 'nowrap',
      width: '100%',
      '&:hover, &:focus': {
        backgroundColor: colors.B.L90,
        color: colors.primary,
        outline: 0,
        textDecoration: 'none'
      }
    }
  }, props), jsx(ItemInner, {
    icon: icon
  }, children));
};

const Menu = styled.div((_ref3) => {
  let {
    left,
    top
  } = _ref3;
  const placementStyles = {
    left,
    top
  };
  return _objectSpread({
    backgroundColor: 'white',
    borderRadius: borderRadius,
    boxShadow: shadows[2],
    marginTop: gridSize,
    minWidth: 160,
    paddingBottom: gridSize / 2,
    paddingTop: gridSize / 2,
    position: 'absolute',
    zIndex: 2
  }, placementStyles);
});

function focus(el) {
  if (el && el instanceof HTMLElement && typeof el.focus === 'function') {
    el.focus();
  }
}

class Dropdown extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      leftOffset: 0,
      topOffset: 0
    });

    _defineProperty(this, "handleItemClick", (_ref4) => {
      let {
        onClick
      } = _ref4,
          data = _objectWithoutProperties(_ref4, ["onClick"]);

      return event => {
        const {
          close,
          selectClosesMenu
        } = this.props;
        if (selectClosesMenu) close(event);
        if (onClick) onClick({
          event,
          data
        });
      };
    });

    _defineProperty(this, "handleKeyDown", event => {
      const {
        key,
        target
      } = event; // appease flow

      if (!(target instanceof HTMLElement)) return; // bail on unused keys

      if (['ArrowUp', 'ArrowDown', 'PageUp', 'PageDown'].indexOf(key) === -1) {
        return;
      } // kill scroll that occurs on arrow/page key press


      event.preventDefault(); // prep shorthand key/node helpers

      const isArrowUp = key === 'ArrowUp';
      const isArrowDown = key === 'ArrowDown';
      const isPageUp = key === 'PageUp';
      const isPageDown = key === 'PageDown';
      const firstItem = this.menu.firstChild;
      const lastItem = this.menu.lastChild;
      const previousItem = target.previousSibling;
      const nextItem = target.nextSibling; // typical item traversal

      if (isArrowUp) focus(previousItem);
      if (isArrowDown) focus(nextItem);
      if (isPageUp) focus(firstItem);
      if (isPageDown) focus(lastItem); // support looping

      if (target === firstItem && isArrowUp) focus(lastItem);
      if (target === lastItem && isArrowDown) focus(firstItem);
    });

    _defineProperty(this, "handleMouseEnter", (_ref5) => {
      let {
        target
      } = _ref5;

      if (target instanceof HTMLElement) {
        this.lastHover = target;
      }

      if (document.activeElement) {
        document.activeElement.blur();
      }
    });

    _defineProperty(this, "handleMenuLeave", () => {
      focus(this.lastHover);
    });

    _defineProperty(this, "getMenu", ref => {
      if (ref !== null) {
        this.menu = ref;
        this.props.getModalRef(ref);
      }
    });

    _defineProperty(this, "calculatePosition", () => {
      const {
        align,
        mode,
        mouseCoords,
        targetNode
      } = this.props;
      if (!targetNode || !document.body) return;
      const bodyRect = document.body.getBoundingClientRect();
      const targetRect = targetNode.getBoundingClientRect();
      const menuHeight = this.menu.clientHeight;
      const menuWidth = this.menu.clientWidth;
      let leftOffset = 0;
      let topOffset = 0; // ------------------------------
      // click menu
      // ------------------------------

      if (mode === 'click') {
        leftOffset = align === 'left' ? targetRect.left : targetRect.right - menuWidth;
        topOffset = targetRect.bottom - bodyRect.top;
        this.setState({
          leftOffset,
          topOffset
        });
        return;
      } // ------------------------------
      // context menu
      // ------------------------------


      const {
        clientX,
        clientY
      } = mouseCoords;
      const screen = {
        w: window.innerWidth,
        h: window.innerHeight
      };
      const right = screen.w - clientX > menuWidth;
      const left = !right;
      const top = screen.h - clientY > menuHeight;
      const bottom = !top;
      if (right) leftOffset = clientX;
      if (left) leftOffset = clientX - menuWidth;
      if (top) topOffset = clientY - bodyRect.top;
      if (bottom) topOffset = clientY - bodyRect.top - menuHeight;
      this.setState({
        leftOffset,
        topOffset
      });
    });
  }

  componentDidMount() {
    this.calculatePosition();
    document.addEventListener('keydown', this.handleKeyDown, false);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown, false);
  }

  render() {
    const {
      items,
      style
    } = this.props;
    const {
      leftOffset,
      topOffset
    } = this.state;
    const attachTo = document.body;

    if (attachTo) {
      return createPortal(jsx(FocusTrap, {
        options: {
          clickOutsideDeactivates: true
        }
      }, jsx(Menu, {
        left: leftOffset,
        onMouseLeave: this.handleMenuLeave,
        ref: this.getMenu,
        style: style,
        top: topOffset
      }, items.map((item, idx) => {
        const {
          content
        } = item,
              rest = _objectWithoutProperties(item, ["content"]);

        return jsx(Item, _extends({}, rest, {
          onClick: this.handleItemClick(item),
          onMouseEnter: this.handleMouseEnter,
          key: idx
        }), content);
      }))), attachTo);
    } else {
      return null;
    }
  }

}

_defineProperty(Dropdown, "defaultProps", {
  align: 'left',
  selectClosesMenu: true
});

var index = withModalHandlers(Dropdown, {
  transition: slideDown
});

export default index;
