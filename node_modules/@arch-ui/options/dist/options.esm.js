import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _extends from '@babel/runtime/helpers/esm/extends';
import { jsx } from '@emotion/core';
import { useMemo } from 'react';
import ReactSelect, { components } from 'react-select';
import { CheckIcon } from '@arch-ui/icons';
import { colors, gridSize } from '@arch-ui/theme';
import { uniformHeight } from '@arch-ui/common';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const CheckMark = (_ref) => {
  let {
    isDisabled,
    isFocused,
    isSelected
  } = _ref;
  let bg;
  let fg;
  let border;
  let size = 24;

  if (isDisabled) {
    bg = isSelected ? colors.N20 : colors.N10;
    fg = isSelected ? 'white' : colors.N10;
    border = isSelected ? colors.N20 : colors.N10;
  } else if (isSelected) {
    bg = isFocused ? 'white' : colors.B.base;
    fg = isFocused ? colors.B.base : 'white';
    border = colors.B.base;
  } else {
    border = isFocused ? colors.N15 : colors.N10;
    bg = isFocused ? colors.N05 : 'white';
    fg = isFocused ? colors.N05 : 'white';
  }

  return jsx("div", {
    css: {
      alignItems: 'center',
      backgroundColor: bg,
      border: "2px solid ".concat(border),
      borderRadius: size,
      boxSizing: 'border-box',
      color: fg,
      display: 'flex',
      height: size,
      justifyContent: 'center',
      width: size
    }
  }, jsx(CheckIcon, null));
};
const OptionPrimitive = (_ref2) => {
  let {
    children,
    isDisabled,
    innerProps,
    innerRef
  } = _ref2;
  return jsx("div", _extends({
    ref: innerRef,
    css: {
      alignItems: 'center',
      color: isDisabled ? colors.N40 : null,
      cursor: 'pointer',
      display: 'flex',
      fontSize: '0.9em',
      fontWeight: 500,
      justifyContent: 'space-between',
      outline: 0,
      padding: "".concat(gridSize, "px 0"),
      pointerEvents: isDisabled ? 'none' : null,
      '&:not(:first-of-type)': {
        borderTop: "1px solid ".concat(colors.N10)
      }
    }
  }, innerProps), children);
};
const optionRendererStyles = {
  control: (provided, state) => _objectSpread({}, provided, {}, uniformHeight, {
    background: state.isFocused ? colors.N10 : colors.N05,
    border: 0,
    boxShadow: 'none',
    cursor: 'text',
    padding: 0,
    minHeight: 34
  }),
  menu: () => ({
    marginTop: 8
  }),
  menuList: provided => _objectSpread({}, provided, {
    padding: 0
  }),
  placeholder: provided => _objectSpread({}, provided, {
    color: colors.N50
  })
};

const Control = (_ref3) => {
  let {
    selectProps
  } = _ref3,
      props = _objectWithoutProperties(_ref3, ["selectProps"]);

  return selectProps.shouldDisplaySearchControl ? jsx(components.Control, props) : jsx("div", {
    css: {
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }
  }, jsx(components.Control, props));
};

const defaultComponents = {
  Control,
  Option: OptionPrimitive,
  DropdownIndicator: null,
  IndicatorSeparator: null
};
const Options = (_ref4) => {
  let {
    displaySearch,
    innerRef,
    components: propComponents
  } = _ref4,
      props = _objectWithoutProperties(_ref4, ["displaySearch", "innerRef", "components"]);

  const components = useMemo(() => _objectSpread({}, defaultComponents, {}, propComponents), [propComponents]);
  return jsx(ReactSelect, _extends({
    backspaceRemovesValue: false,
    captureMenuScroll: false,
    closeMenuOnSelect: false,
    controlShouldRenderValue: false,
    hideSelectedOptions: false,
    isClearable: false,
    isSearchable: displaySearch,
    maxMenuHeight: 1000,
    menuIsOpen: true,
    menuShouldScrollIntoView: false,
    ref: innerRef,
    shouldDisplaySearchControl: displaySearch,
    styles: optionRendererStyles // TODO: JW: Not a fan of this, but it doesn't seem to make a difference
    // if we take it out. react-select bug maybe?
    ,
    tabSelectsValue: false
  }, props, {
    components: components
  }));
};
Options.defaultProps = {
  displaySearch: true
};

export { CheckMark, OptionPrimitive, Options };
