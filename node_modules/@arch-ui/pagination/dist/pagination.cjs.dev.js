'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var core = require('@emotion/core');
var React = require('react');
var icons = require('@arch-ui/icons');
var layout = require('@arch-ui/layout');
var loading = require('@arch-ui/loading');
var button = require('@arch-ui/button');

const Page = props => {
  const handleClick = () => {
    if (props.onClick) {
      props.onClick(props.value);
    }
  };

  return React.createElement(button.Button, _extends({}, props, {
    onClick: handleClick
  }));
};

function ariaPageLabelFn(page) {
  return "Go to page ".concat(page);
}

const PageChildren = (_ref) => {
  let {
    page,
    isLoading,
    isSelected
  } = _ref;
  const [shouldShowLoading, setShouldShowLoading] = React.useState(false);
  React.useEffect(() => {
    if (isLoading && isSelected) {
      const id = setTimeout(() => {
        setShouldShowLoading(true);
      }, 200);
      return () => {
        clearTimeout(id);
        setShouldShowLoading(false);
      };
    }
  }, [page, isLoading, isSelected]);
  return shouldShowLoading ? core.jsx("div", {
    css: {
      height: 19
    }
  }, core.jsx(loading.LoadingSpinner, null)) : core.jsx("span", null, page);
};

class Pagination extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      allPagesVisible: false
    });

    _defineProperty(this, "toggleAllPages", () => {
      this.setState(state => ({
        allPagesVisible: !state.allPagesVisible
      }));
    });
  }

  renderPages() {
    let {
      ariaPageLabel,
      currentPage,
      limit,
      pageSize,
      total
    } = this.props;
    if (total <= pageSize) return [];
    let pages = [];
    let totalPages = Math.ceil(total / pageSize);
    let minPage = 1;
    let maxPage = totalPages;
    const moreCharacter = core.jsx("span", null, "\u2026");

    if (limit && limit < totalPages) {
      let rightLimit = Math.floor(limit / 2);
      let leftLimit = rightLimit + limit % 2 - 1;
      minPage = currentPage - leftLimit;
      maxPage = currentPage + rightLimit;

      if (minPage < 1) {
        maxPage = limit;
        minPage = 1;
      }

      if (maxPage > totalPages) {
        minPage = totalPages - limit + 1;
        maxPage = totalPages;
      }
    }

    const onChange = page => {
      if (this.props.onChange) {
        this.setState({
          allPagesVisible: false
        });
        this.props.onChange(page, {
          pageSize,
          total,
          minPage,
          maxPage
        });
      }
    }; // go to first


    if (minPage > 1) {
      pages.push(core.jsx(Page, {
        "aria-label": ariaPageLabel(1),
        key: "page_start",
        onClick: onChange,
        value: 1
      }, moreCharacter));
    } // loop over range


    for (let page = minPage; page <= maxPage; page++) {
      const isSelected = page === currentPage;
      pages.push(core.jsx(Page, {
        "aria-label": ariaPageLabel(page),
        "aria-current": isSelected ? 'page' : null,
        key: "page_".concat(page),
        isSelected: isSelected,
        onClick: onChange,
        value: page
      }, core.jsx(PageChildren, {
        isLoading: this.props.isLoading,
        page: page,
        isSelected: isSelected
      })));
    } // go to last


    if (maxPage < totalPages) {
      pages.push(core.jsx(Page, {
        "aria-label": ariaPageLabel(totalPages),
        key: "page_end",
        onClick: onChange,
        value: totalPages
      }, moreCharacter));
    } // return pages;


    return [core.jsx(Page, {
      "aria-label": "Go to previous page",
      key: "page_prev",
      onClick: onChange,
      value: currentPage - 1,
      isDisabled: currentPage === 1
    }, core.jsx(icons.ChevronLeftIcon, null)), this.state.allPagesVisible ? pages : core.jsx(Page, {
      "aria-label": "Click to show all pages",
      key: "page_dot",
      onClick: this.toggleAllPages,
      id: "ks-pagination-show-pages",
      value: 1 // needs value for flow...

    }, core.jsx(icons.ListOrderedIcon, null)), core.jsx(Page, {
      "aria-label": "Go to next page",
      key: "page_next",
      onClick: onChange,
      value: currentPage + 1,
      isDisabled: currentPage === totalPages
    }, core.jsx(icons.ChevronRightIcon, null))];
  }

  render() {
    // strip props to get `rest` attributes; things id, className etc.
    const _this$props = this.props,
          rest = _objectWithoutProperties(_this$props, ["ariaPageLabel", "currentPage", "isLoading", "limit", "onChange", "pageSize", "total"]);

    return core.jsx(layout.FlexGroup, _extends({
      as: "nav",
      align: "center",
      "aria-label": "Pagination",
      isContiguous: true,
      isInline: true
    }, rest), this.renderPages());
  }

}

_defineProperty(Pagination, "defaultProps", {
  ariaPageLabel: ariaPageLabelFn,
  currentPage: 1,
  limit: 5
});

exports.Pagination = Pagination;
